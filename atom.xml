<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>曾经浮华的小窝</title>
  
  <subtitle>hello,world!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.xiaocc.xyz/"/>
  <updated>2019-01-11T07:37:39.083Z</updated>
  <id>http://www.xiaocc.xyz/</id>
  
  <author>
    <name>曾经浮华</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JMeter压测工具之使用</title>
    <link href="http://www.xiaocc.xyz/2019-01-11/JMeter%E5%8E%8B%E6%B5%8B%E5%B7%A5%E5%85%B7/"/>
    <id>http://www.xiaocc.xyz/2019-01-11/JMeter压测工具/</id>
    <published>2019-01-11T06:30:00.000Z</published>
    <updated>2019-01-11T07:37:39.083Z</updated>
    
    <content type="html"><![CDATA[<p><code>Apache JMeter</code>压测工具，简介与使用</p><a id="more"></a><h4><span id="背景">背景</span></h4><p>目前后台服务采用<code>restful</code>模式，网络层使用<code>Http + Json</code>，交互模式比较通用，排查问题时候，<code>Json</code>格式也比较易于阅读。</p><p>之前采用<code>Tcp + 自定义数据格式</code>的交互模式，排查问题比较头疼，就算采用<code>tcpdump</code>等抓包工具，由于数据是二进制格式，非常不直白。</p><p>采用<code>Http</code>协议还有一个重大好处，就是可以直接使用非常多的测试、Debug工具。</p><p>这次需要对服务器性能进行测试，压测每个接口的性能上限，以利于部署机器。</p><p>所以，找到了鼎鼎大名的<code>JMeter</code>，使用过后，强烈推荐。</p><h4><span id="使用">使用</span></h4><p>由于<code>JMeter</code>支持的功能非常非常多，整个软件很复杂，如果只是想进行接口性能测试，只需要了解几个基本用法就行。</p><ul><li><p>创建一个<code>线程组</code><br><img src="https://blog-1256756464.cos.ap-shanghai.myqcloud.com/image/Jietu20190111-150504.jpg" alt=""></p></li><li><p><code>线程组</code>相关字段解释<br><img src="https://blog-1256756464.cos.ap-shanghai.myqcloud.com/image/Jietu20190111-150758.jpg" alt=""></p><ul><li><code>线程数</code>，可以理解为发起请求的用户数</li><li><code>Ramp-Up时间</code>，创建完全部<code>线程数</code>需要的时间。可以这么理解，如果<code>线程数</code>设置为<code>100</code>，<code>Ramp-Up时间</code>设置为<code>1</code>，相当于100个用户在1秒内顺次发起请求，一个用户发起请求后，下一个用户等待10ms，然后才发起请求，总耗时：<code>100 * 10ms = 1s</code>。</li><li><code>循环次数</code>，如果勾选<code>永远</code>，一个<code>Ramp-Up时间</code>结束后，重新开始一个新的周期。</li></ul><p><strong>所以，如果想以<code>200qps</code>的速度测试某个接口，可以将线程数设置为200，Ramp-Up设置为1</strong></p></li><li><p>线程组配置完毕后，可以进行测试接口相关配置，由于我们需要进行<code>Http</code>接口测试，所以添加一个<code>Http</code>类型的取样器<br><img src="https://blog-1256756464.cos.ap-shanghai.myqcloud.com/image/Jietu20190111-151723.jpg" alt="">  </p></li><li><p>在这个<code>Http</code>取样器中，我们只是简单的访问了一下百度<br><img src="https://blog-1256756464.cos.ap-shanghai.myqcloud.com/image/Jietu20190111-152128.jpg" alt=""><br><em>可以对<code>Http</code>请求进行额外的配置，例如添加Header信息等，均在<code>配置元件</code>栏目中</em></p></li><li><p>为了查看<code>Http</code>请求的响应结果，我们添加<code>监听器</code>栏目中的<code>查看结果树</code></p></li><li><p>为了进行接口性能统计，我们添加<code>监听器</code>栏目中的<code>汇总报告</code><br><img src="https://blog-1256756464.cos.ap-shanghai.myqcloud.com/image/Jietu20190111-152734.jpg" alt=""></p></li><li><p>点击启动后，可以查看<code>Http</code>服务响应数据信息<br><img src="https://blog-1256756464.cos.ap-shanghai.myqcloud.com/image/Jietu20190111-153025.jpg" alt=""></p></li><li><p>在<code>汇总报告</code>中可以查询请求耗时及<code>qps</code>等等数据</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Apache JMeter&lt;/code&gt;压测工具，简介与使用&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://www.xiaocc.xyz/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux中OOM Killer分数计算规则</title>
    <link href="http://www.xiaocc.xyz/2018-12-28/OOM%E8%AE%A1%E7%AE%97%E8%A7%84%E5%88%99/"/>
    <id>http://www.xiaocc.xyz/2018-12-28/OOM计算规则/</id>
    <published>2018-12-28T14:30:00.000Z</published>
    <updated>2018-12-28T15:38:06.808Z</updated>
    
    <content type="html"><![CDATA[<p>分析内存不足时候，OOM Killer计算规则</p><a id="more"></a><h4><span id="前言">前言</span></h4><p>我们知道，当系统内存不足时，内核会找到一个<em>倒霉鬼</em>，将其kill并释放内存。</p><p>那么，这个查找规则是什么，是随机选取，还是按照进程的内存占用量倒排？</p><p>如何保证重要业务进程不被kill？</p><p>依然记得某天下午突然收到一条告警短信，进程不存在！赶紧将流量从这台机器切走，并排查进程异常的原因，最终在系统message中找到，<strong>OOM</strong>，心累。</p><h4><span id="oom触发流程">OOM触发流程</span></h4><p>访问内存时，如果物理页未分配会引发缺页中断，并最终引发OOM算分。</p><p>流程如下：<br><code>do_page_fault</code> -&gt; <code>out_of_memory</code> -&gt; <code>select_bad_process</code> -&gt; <code>oom_badness</code>。</p><p>在<code>oom_badness</code>即会对进程计算分数，分数越高被kill可能性越高。</p><h4><span id="详细计算规则">详细计算规则</span></h4><p>Linux最初版计算分数时候，只考虑内存使用量这个维度，可以预见该计算规则考虑不全面。</p><h5><span id="v2639版本">v2.6.39版本</span></h5><p>该版本实现代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * oom_badness - heuristic function to determine which candidate task to kill</span></span><br><span class="line"><span class="comment"> * @p: task struct of which task we should calculate</span></span><br><span class="line"><span class="comment"> * @totalpages: total present RAM allowed for page allocation</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The heuristic for determining which task to kill is made to be as simple and</span></span><br><span class="line"><span class="comment"> * predictable as possible.  The goal is to return the highest value for the</span></span><br><span class="line"><span class="comment"> * task consuming the most memory to avoid subsequent oom failures.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">oom_badness</span><span class="params">(struct task_struct *p, struct mem_cgroup *mem,</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">const</span> <span class="keyword">nodemask_t</span> *nodemask, <span class="keyword">unsigned</span> <span class="keyword">long</span> totalpages)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> points;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (oom_unkillable_task(p, mem, nodemask))</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">p = find_lock_task_mm(p);</span><br><span class="line"><span class="keyword">if</span> (!p)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Shortcut check for a thread sharing p-&gt;mm that is OOM_SCORE_ADJ_MIN</span></span><br><span class="line"><span class="comment"> * so the entire heuristic doesn't need to be executed for something</span></span><br><span class="line"><span class="comment"> * that cannot be killed.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (atomic_read(&amp;p-&gt;mm-&gt;oom_disable_count)) &#123;</span><br><span class="line">task_unlock(p);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * When the PF_OOM_ORIGIN bit is set, it indicates the task should have</span></span><br><span class="line"><span class="comment"> * priority for oom killing.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (p-&gt;flags &amp; PF_OOM_ORIGIN) &#123;</span><br><span class="line">task_unlock(p);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * The memory controller may have a limit of 0 bytes, so avoid a divide</span></span><br><span class="line"><span class="comment"> * by zero, if necessary.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (!totalpages)</span><br><span class="line">totalpages = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * The baseline for the badness score is the proportion of RAM that each</span></span><br><span class="line"><span class="comment"> * task's rss, pagetable and swap space use.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">points = get_mm_rss(p-&gt;mm) + p-&gt;mm-&gt;nr_ptes;</span><br><span class="line">points += get_mm_counter(p-&gt;mm, MM_SWAPENTS);</span><br><span class="line"></span><br><span class="line">points *= <span class="number">1000</span>;</span><br><span class="line">points /= totalpages;</span><br><span class="line">task_unlock(p);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Root processes get 3% bonus, just like the __vm_enough_memory()</span></span><br><span class="line"><span class="comment"> * implementation used by LSMs.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (has_capability_noaudit(p, CAP_SYS_ADMIN))</span><br><span class="line">points -= <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * /proc/pid/oom_score_adj ranges from -1000 to +1000 such that it may</span></span><br><span class="line"><span class="comment"> * either completely disable oom killing or always prefer a certain</span></span><br><span class="line"><span class="comment"> * task.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">points += p-&gt;signal-&gt;oom_score_adj;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Never return 0 for an eligible task that may be killed since it's</span></span><br><span class="line"><span class="comment"> * possible that no single user task uses more than 0.1% of memory and</span></span><br><span class="line"><span class="comment"> * no single admin tasks uses more than 3.0%.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (points &lt;= <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> (points &lt; <span class="number">1000</span>) ? points : <span class="number">1000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该版本考虑维度如下：<br>rss、pagetable、swap使用量、是否root进程</p><p>可以通过调整<code>/proc/pid/oom_score_adj</code>值，对最终分数进行调整。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OOM_SCORE_ADJ_MIN(-1000)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OOM_SCORE_ADJ_MAX1000</span></span><br></pre></td></tr></table></figure><p><strong>其中设置值为<code>OOM_SCORE_ADJ_MIN</code>，进程不会被kill。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分析内存不足时候，OOM Killer计算规则&lt;/p&gt;
    
    </summary>
    
      <category term="编程理论" scheme="http://www.xiaocc.xyz/categories/%E7%BC%96%E7%A8%8B%E7%90%86%E8%AE%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>利用redis进行无密码登录服务器</title>
    <link href="http://www.xiaocc.xyz/2018-12-23/%E5%88%A9%E7%94%A8redis%E8%BF%9B%E8%A1%8C%E6%97%A0%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/"/>
    <id>http://www.xiaocc.xyz/2018-12-23/利用redis进行无密码登录/</id>
    <published>2018-12-23T12:30:00.000Z</published>
    <updated>2018-12-23T12:52:17.954Z</updated>
    
    <content type="html"><![CDATA[<p>分析如何利用redis进行无密码登录服务器</p><a id="more"></a><h4><span id="背景">背景</span></h4><p>前段时间，几台服务器被侵入并植入挖坑程序，搜索相关资料后，发现可以利用redis进行无密码登录，特别是redis用root用户启动，并暴露端口在外网能够访问。</p><p>特此记录，以备忘，redis高版本已修复该问题。</p><h4><span id="操作流程">操作流程</span></h4><p>由于redis没有严格的权限分离，也没有账号系统，只要知道redis绑定的ip、port，就可以进行登录，如果redis密码未设置，或者密码复杂度较低，很容易连接上来进行redis运维命令操作。</p><p>这里介绍如何利用redis进行无密码登录，主要涉及其运维命令。</p><p>核心即是，将个人ssh公钥保存到<code>/root/.ssh/</code>目录下，文件名为<code>authorized_keys</code>，即可实现ssh的无密码登录。</p><ul><li>flushall</li><li>config get dir</li><li>config get dbfilename</li><li>config set dir /root/.ssh</li><li>config set dbfilename authorized_keys</li><li>set xxxx WW</li><li>save</li></ul><p>将WW更改为个人ssh公钥即可</p><p>操作完毕后即可发现在<code>/root/.ssh</code>目录下新增<code>authorized_keys</code>文件，其内容中包含个人ssh公钥。</p><p>至此即可实现无密码登录服务器。</p><p>备注：经过实验，新版redis修改了rdb备份文件格式，该方式不再有效，不过<code>2.x</code>版本存在该漏洞。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分析如何利用redis进行无密码登录服务器&lt;/p&gt;
    
    </summary>
    
      <category term="编程实践" scheme="http://www.xiaocc.xyz/categories/%E7%BC%96%E7%A8%8B%E5%AE%9E%E8%B7%B5/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux程序装载与运行流程分析</title>
    <link href="http://www.xiaocc.xyz/2018-12-19/linux%E7%A8%8B%E5%BA%8F%E8%A3%85%E8%BD%BD%E4%B8%8E%E8%BF%90%E8%A1%8C/"/>
    <id>http://www.xiaocc.xyz/2018-12-19/linux程序装载与运行/</id>
    <published>2018-12-19T14:30:00.000Z</published>
    <updated>2018-12-21T15:16:29.559Z</updated>
    
    <content type="html"><![CDATA[<p>分析Linux程序如何装载与运行</p><a id="more"></a><h4><span id="背景">背景</span></h4><p>在上篇中我们提到如何修改进程名称，其中有一个预设条件：argv数据与environ数据，呈现为紧凑型布局。</p><p>本篇将实地验证这个假设，要想知道这两种数据的内存布局，只能从程序启动流程开始排查，这样就涉及到程序的装载与运行流程。</p><h4><span id="程序如何启动">程序如何启动</span></h4><p>我们启动程序一般都是在命令行中，其实是在与<code>shell</code>打交道，然后<code>shell</code>帮我们启动程序，并传递相关参数。</p><p><code>strace</code>工具能够追踪一个程序执行的系统调用，因而我们构造一个简单的空程序，并在命令行执行：<br><code>strace ./a.out -a -b</code></p><p>输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">execve(&quot;./a.out&quot;, [&quot;./a.out&quot;, &quot;-a&quot;, &quot;-b&quot;], 0x7fffc9651ce0 /* 44 vars */) = 0</span><br><span class="line">brk(NULL)                               = 0x82f000</span><br><span class="line">mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fb9c2c80000</span><br><span class="line">access(&quot;/etc/ld.so.preload&quot;, R_OK)      = -1 ENOENT (No such file or directory)</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>可见，<code>shell</code>启动程序时执行的第一个系统调用为<code>execve</code>，在glibc库函数中的<code>exec</code>函数族：<br><code>execl, execlp, execle, execv, execvp, execvpe</code>最终即是调用得该系统调用。</p><p><code>man execl</code>，看看该函数的作用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The  exec()  family  of  functions replaces the current process image with a new process image.  </span><br><span class="line">The functions described in this manual page are front-ends for execve(2).  </span><br><span class="line">(See the manual page for execve(2) for further details about the replacement  of  the current process image.)</span><br></pre></td></tr></table></figure><p>可见该函数族作用就是清空当前进程并装载新进程。</p><h4><span id="execve"><code>execve</code></span></h4><p>我们看看该系统调用得代码：<br><a href="https://elixir.bootlin.com/linux/v2.6.36/source/arch/s390/kernel/process.c#L270" target="_blank" rel="noopener">execve在线代码</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * sys_execve() executes a new program.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">SYSCALL_DEFINE3(execve, <span class="keyword">const</span> <span class="keyword">char</span> __user *, name,</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> __user *<span class="keyword">const</span> __user *, argv,</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> __user *<span class="keyword">const</span> __user *, envp)</span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pt_regs</span> *<span class="title">regs</span> = <span class="title">task_pt_regs</span>(<span class="title">current</span>);</span></span><br><span class="line"><span class="keyword">char</span> *filename;</span><br><span class="line"><span class="keyword">long</span> rc;</span><br><span class="line"></span><br><span class="line">filename = getname(name);</span><br><span class="line">rc = PTR_ERR(filename);</span><br><span class="line"><span class="keyword">if</span> (IS_ERR(filename))</span><br><span class="line"><span class="keyword">return</span> rc;</span><br><span class="line">rc = do_execve(filename, argv, envp, regs);</span><br><span class="line"><span class="keyword">if</span> (rc)</span><br><span class="line"><span class="keyword">goto</span> out;</span><br><span class="line">execve_tail();</span><br><span class="line">rc = regs-&gt;gprs[<span class="number">2</span>];</span><br><span class="line">out:</span><br><span class="line">putname(filename);</span><br><span class="line"><span class="keyword">return</span> rc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体工作其实由<code>do_execve</code>完成，再看看该函数：</p><h4><span id="do_execve"><code>do_execve</code></span></h4><p><a href="https://elixir.bootlin.com/linux/v2.6.36/source/fs/exec.c#L1334" target="_blank" rel="noopener">do_execve在线代码</a></p><p>精简后的核心代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * sys_execve() executes a new program.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">do_execve</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> * filename,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">const</span> <span class="keyword">char</span> __user *<span class="keyword">const</span> __user *argv,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">const</span> <span class="keyword">char</span> __user *<span class="keyword">const</span> __user *envp,</span></span></span><br><span class="line"><span class="function"><span class="params">struct pt_regs * regs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    file = open_exec(filename);</span><br><span class="line">        </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    retval = bprm_mm_init(bprm);</span><br><span class="line">    <span class="keyword">if</span> (retval)</span><br><span class="line">    <span class="keyword">goto</span> out_file;</span><br><span class="line">    </span><br><span class="line">    bprm-&gt;argc = count(argv, MAX_ARG_STRINGS);</span><br><span class="line">    <span class="keyword">if</span> ((retval = bprm-&gt;argc) &lt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">goto</span> out;</span><br><span class="line">    </span><br><span class="line">    bprm-&gt;envc = count(envp, MAX_ARG_STRINGS);</span><br><span class="line">    <span class="keyword">if</span> ((retval = bprm-&gt;envc) &lt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">goto</span> out;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    bprm-&gt;exec = bprm-&gt;p;</span><br><span class="line">    retval = copy_strings(bprm-&gt;envc, envp, bprm);</span><br><span class="line">    <span class="keyword">if</span> (retval &lt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">goto</span> out;</span><br><span class="line">    </span><br><span class="line">    retval = copy_strings(bprm-&gt;argc, argv, bprm);</span><br><span class="line">    <span class="keyword">if</span> (retval &lt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">goto</span> out;</span><br><span class="line">    </span><br><span class="line">    current-&gt;flags &amp;= ~PF_KTHREAD;</span><br><span class="line">    retval = search_binary_handler(bprm,regs);</span><br><span class="line">    <span class="keyword">if</span> (retval &lt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">goto</span> out;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中有我们要的关键信息，计算<code>argv</code>、<code>env</code>的数量，并拷贝相关数据，这里有个奇怪的点，它为什么是先拷贝的<code>env</code>，然后再拷贝的<code>argv</code>，按照上一篇的内存布局图，应该是先<code>argv</code>，再<code>env</code>？</p><p>只能详细看看<code>copy_strings</code>的实现：</p><h4><span id="copy_strings"><code>copy_strings</code></span></h4><p><a href="https://elixir.bootlin.com/linux/v2.6.36/source/fs/exec.c#L393" target="_blank" rel="noopener">copy_strings在线代码</a></p><p>它的注释解释得很清楚</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 'copy_strings()' copies argument/environment strings from the old</span></span><br><span class="line"><span class="comment"> * processes's memory to the new process's stack.  The call to get_user_pages()</span></span><br><span class="line"><span class="comment"> * ensures the destination page is created and not swapped out.</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>它从旧的进程内存中往新进程的<code>stack</code>中拷贝数据，而<code>stack</code>一般是从高地址向低地址生长，所以要先拷贝<code>env</code>，再拷贝<code>argv</code>。<br><img src="https://blog-1256756464.cos.ap-shanghai.myqcloud.com/image/Jietu20181219-232948.jpg" alt=""></p><p>并且其实现中：<br><code>while (argc-- &gt; 0)</code> 从数组最后一个元素开始拷贝<br><code>bprm-&gt;p -= len;</code> 栈指针向下生长</p><p>至此就能够解释为何<code>argv</code>、<code>env</code>数据为连续紧凑型存储。</p><h4><span id="程序装载">程序装载</span></h4><p>在<code>do_execve</code>中接下来会调用<br><code>retval = search_binary_handler(bprm,regs);</code><br>就涉及到程序的装载<br><a href="https://elixir.bootlin.com/linux/v2.6.36/source/fs/exec.c#L1255" target="_blank" rel="noopener">函数在线代码</a></p><p>关键代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">list_for_each_entry(fmt, &amp;formats, lh) &#123;</span><br><span class="line">    <span class="keyword">int</span> (*fn)(struct linux_binprm *, struct pt_regs *) = fmt-&gt;load_binary;</span><br><span class="line">    <span class="keyword">if</span> (!fn)</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">if</span> (!try_module_get(fmt-&gt;<span class="keyword">module</span>))</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">    read_unlock(&amp;binfmt_lock);</span><br><span class="line">    retval = fn(bprm, regs);</span><br></pre></td></tr></table></figure><h5><span id="formats">formats</span></h5><p>其会遍历<code>formats</code>列表，找到合适的可装载格式，linux下编译出来的可执行程序格式一般为<code>ELF</code>格式。<br>其对应的<code>load_binary</code>函数为<code>load_elf_binary</code></p><p>我们看看<code>formats</code>列表是如何赋值的</p><p>在<code>fs/binfmt_elf.c</code>文件中，该文件会编译成为一个模块</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> __<span class="function">init <span class="title">init_elf_binfmt</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> register_binfmt(&amp;elf_format);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __<span class="function"><span class="built_in">exit</span> <span class="title">exit_elf_binfmt</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/* Remove the COFF and ELF loaders. */</span></span><br><span class="line">unregister_binfmt(&amp;elf_format);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">core_initcall(init_elf_binfmt);</span><br><span class="line">module_exit(exit_elf_binfmt);</span><br><span class="line">MODULE_LICENSE(<span class="string">"GPL"</span>);</span><br></pre></td></tr></table></figure><h5><span id="init_elf_binfmt">init_elf_binfmt</span></h5><p>在模块初始化的时候会调用<code>init_elf_binfmt</code>函数，其会转而调用<code>register_binfmt</code>函数，参数为<code>elf_format</code>，该结构数据如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">linux_binfmt</span> <span class="title">elf_format</span> = &#123;</span></span><br><span class="line">.<span class="keyword">module</span>= THIS_MODULE,</span><br><span class="line">.load_binary= load_elf_binary,</span><br><span class="line">.load_shlib= load_elf_library,</span><br><span class="line">.core_dump= elf_core_dump,</span><br><span class="line">.min_coredump= ELF_EXEC_PAGESIZE,</span><br><span class="line">.hasvdso= <span class="number">1</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以清晰的看到<code>elf_format.load_binary</code>赋值为<code>load_elf_binary</code>。</p><p>再看看这个<code>elf_format</code>是如何注册到<code>formats</code>列表上面的</p><p><code>register_binfmt</code>函数最终会调用到<code>__register_binfmt</code>，其实现如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __register_binfmt(struct linux_binfmt * fmt, <span class="keyword">int</span> insert)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!fmt)</span><br><span class="line"><span class="keyword">return</span> -EINVAL;</span><br><span class="line">write_lock(&amp;binfmt_lock);</span><br><span class="line">insert ? list_add(&amp;fmt-&gt;lh, &amp;formats) :</span><br><span class="line"> list_add_tail(&amp;fmt-&gt;lh, &amp;formats);</span><br><span class="line">write_unlock(&amp;binfmt_lock);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见，其通过调用<code>list_add_tail</code>方法将<strong>fmt</strong>数据挂载到<code>formats</code>结构，至此，<code>ELF</code>格式的程序能被系统识别并加载。</p><h5><span id="加载程序-load_elf_binary">加载程序 load_elf_binary</span></h5><p><a href="https://elixir.bootlin.com/linux/v2.6.36/source/fs/binfmt_elf.c#L564" target="_blank" rel="noopener">在线代码</a></p><p>先检查可执行文件头部Magic是否为<code>ELF</code>格式</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span>ELFMAG<span class="meta-string">"\177ELF"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>SELFMAG4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* First of all, some simple consistency checks */</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">memcmp</span>(loc-&gt;elf_ex.e_ident, ELFMAG, SELFMAG) != <span class="number">0</span>)</span><br><span class="line"><span class="keyword">goto</span> out;</span><br></pre></td></tr></table></figure><p>然后读取头部header信息，找到<code>if (elf_ppnt-&gt;p_type == PT_INTERP)</code>这个段，这个段表示可执行程序运行时，需要依赖动态链接库解释器。</p><p>执行<code>readelf -l a.out</code>可以查看可执行程序相关段信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INTERP         0x0000000000000238 0x0000000000400238 0x0000000000400238</span><br><span class="line">               0x000000000000001c 0x000000000000001c  R      0x1</span><br><span class="line">    [Requesting program interpreter: /lib64/ld-linux-x86-64.so.2]</span><br></pre></td></tr></table></figure><p>所以在<code>load_elf_binary</code>中，会读取<code>interpreter</code>这个头的字符串，其值为解释器程序的路径，再以该路径读取解释器程序本身。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">retval = kernel_read(bprm-&gt;file, elf_ppnt-&gt;p_offset,</span><br><span class="line">     elf_interpreter,</span><br><span class="line">     elf_ppnt-&gt;p_filesz);</span><br><span class="line"><span class="keyword">if</span> (retval != elf_ppnt-&gt;p_filesz) &#123;</span><br><span class="line"><span class="keyword">if</span> (retval &gt;= <span class="number">0</span>)</span><br><span class="line">retval = -EIO;</span><br><span class="line"><span class="keyword">goto</span> out_free_interp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* make sure path is NULL terminated */</span></span><br><span class="line">retval = -ENOEXEC;</span><br><span class="line"><span class="keyword">if</span> (elf_interpreter[elf_ppnt-&gt;p_filesz - <span class="number">1</span>] != <span class="string">'\0'</span>)</span><br><span class="line"><span class="keyword">goto</span> out_free_interp;</span><br><span class="line"></span><br><span class="line">interpreter = open_exec(elf_interpreter);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">retval = kernel_read(interpreter, <span class="number">0</span>, bprm-&gt;buf,</span><br><span class="line">     BINPRM_BUF_SIZE);</span><br><span class="line"><span class="keyword">if</span> (retval != BINPRM_BUF_SIZE) &#123;</span><br><span class="line"><span class="keyword">if</span> (retval &gt;= <span class="number">0</span>)</span><br><span class="line">retval = -EIO;</span><br><span class="line"><span class="keyword">goto</span> out_free_dentry;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Get the exec headers */</span></span><br><span class="line">loc-&gt;interp_elf_ex = *((struct elfhdr *)bprm-&gt;buf);</span><br></pre></td></tr></table></figure><p>新进程的入口点如何确定？</p><p>通过阅读代码可以发现，依赖动态链接库的程序，其进程入口点为解释器entry，否则为程序本身entry。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (elf_interpreter) &#123;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">uninitialized_var</span><span class="params">(interp_map_addr)</span></span>;</span><br><span class="line"></span><br><span class="line">elf_entry = load_elf_interp(&amp;loc-&gt;interp_elf_ex,</span><br><span class="line">    interpreter,</span><br><span class="line">    &amp;interp_map_addr,</span><br><span class="line">    load_bias);</span><br><span class="line"><span class="keyword">if</span> (!IS_ERR((<span class="keyword">void</span> *)elf_entry)) &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * load_elf_interp() returns relocation</span></span><br><span class="line"><span class="comment"> * adjustment</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">interp_load_addr = elf_entry;</span><br><span class="line">elf_entry += loc-&gt;interp_elf_ex.e_entry;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">elf_entry = loc-&gt;elf_ex.e_entry;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">retval = create_elf_tables(bprm, &amp;loc-&gt;elf_ex,</span><br><span class="line">  load_addr, interp_load_addr);</span><br><span class="line">  </span><br><span class="line">start_thread(regs, elf_entry, bprm-&gt;p);</span><br></pre></td></tr></table></figure><p>在<code>create_elf_tables</code>函数中会设置<code>argv</code>、<code>env</code>指针数组的值，注意，这里只是将各个字符串的指针设置到<code>argv</code>、<code>env</code>数组中。</p><p>最后调用<code>start_thread</code>并传入<code>elf_entry</code>作为入口点，<code>elf_entry</code>可能为解释器entry，其会加载动态链接库等准备工作，然后转到程序自身entry执行。</p><p>至此，程序加载并启动执行。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分析Linux程序如何装载与运行&lt;/p&gt;
    
    </summary>
    
      <category term="编程实践" scheme="http://www.xiaocc.xyz/categories/%E7%BC%96%E7%A8%8B%E5%AE%9E%E8%B7%B5/"/>
    
    
  </entry>
  
  <entry>
    <title>如何修改进程名称</title>
    <link href="http://www.xiaocc.xyz/2018-12-16/%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9%E8%BF%9B%E7%A8%8B%E5%90%8D%E7%A7%B0/"/>
    <id>http://www.xiaocc.xyz/2018-12-16/如何修改进程名称/</id>
    <published>2018-12-16T14:30:00.000Z</published>
    <updated>2018-12-17T15:02:56.670Z</updated>
    
    <content type="html"><![CDATA[<p>分析如何修改进程名称，以利于更清楚的展示进程相关信息</p><a id="more"></a><h4><span id="引子">引子</span></h4><p>最近服务器中了挖矿病毒，CPU暴涨，<code>top</code>查看到的高负载进程名为随机字母。<br>一般情况下进程名为可执行文件名，执行<code>cat /proc/{pid}/exe</code>，查看可执行文件路径，可执行文件已经被删除。</p><p>网上搜索相关资料，找到一个有意思的问题，如何修改进程名称？</p><p>在<code>redis</code>、<code>nginx</code>中有修改进程名的相关实现，函数为<code>setproctitle</code>。<br>在<code>nginx</code>中有详细的原理解释。</p><h4><span id="核心">核心</span></h4><p>如<code>nginx</code>中注释所言：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> * To change the process title in Linux and Solaris we have to set argv[1]</span><br><span class="line"> * to NULL and to copy the title to the same place where the argv[0] points to.</span><br><span class="line"> * However, argv[0] may be too small to hold a new title.  Fortunately, Linux</span><br><span class="line"> * and Solaris store argv[] and environ[] one after another.  So we should</span><br><span class="line"> * ensure that is the continuous memory and then we allocate the new memory</span><br><span class="line"> * for environ[] and copy it.  After this we could use the memory starting</span><br><span class="line"> * from argv[0] for our process title.</span><br><span class="line"> *</span><br><span class="line"> * The Solaris&apos;s standard /bin/ps does not show the changed process title.</span><br><span class="line"> * You have to use &quot;/usr/ucb/ps -w&quot; instead.  Besides, the UCB ps does not</span><br><span class="line"> * show a new title if its length less than the origin command line length.</span><br><span class="line"> * To avoid it we append to a new title the origin command line in the</span><br><span class="line"> * parenthesis.</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><p>进程名及命令行参数保存在<code>argv</code>数组中，而相关环境变量则保存在<code>environ</code>数组中，其内存布局如图：<br><img src="https://blog-1256756464.cos.ap-shanghai.myqcloud.com/image/Jietu20181216-231645.jpg" alt=""></p><p>可见命令行参数与环境变量是紧凑型存储在一块连续的内存。</p><p>想要改变进程名就得改变<code>argv[0]</code>的值，如果直接设置新进程名，当其过长，会将这块内存区域写坏。</p><p>那该如何实现？</p><h4><span id="实现">实现</span></h4><p>这里采用的方式是给<code>environ</code>数据重新分配一块空间，并改变<code>environ</code>指针数组的值，让其每个指针指向新数据对应地址。<br><img src="https://blog-1256756464.cos.ap-shanghai.myqcloud.com/image/Jietu20181216-232458.jpg" alt=""></p><p>这样<code>argv[0]</code>就有足够空间设置新进程名。</p><h4><span id="注意">注意</span></h4><p>如果新进程名比原进程名短，需要先清空<code>argv[0]</code>指向的数据，然后再设置。<br><code>environ</code>可通过<code>extern char** environ</code>获得。</p><p><em>TODO：分析为何argv、environ为连续紧凑型存储</em></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分析如何修改进程名称，以利于更清楚的展示进程相关信息&lt;/p&gt;
    
    </summary>
    
      <category term="编程实践" scheme="http://www.xiaocc.xyz/categories/%E7%BC%96%E7%A8%8B%E5%AE%9E%E8%B7%B5/"/>
    
    
  </entry>
  
  <entry>
    <title>协程原理解析(3)</title>
    <link href="http://www.xiaocc.xyz/2018-12-14/%E5%8D%8F%E7%A8%8B%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%903/"/>
    <id>http://www.xiaocc.xyz/2018-12-14/协程原理解析3/</id>
    <published>2018-12-14T14:30:00.000Z</published>
    <updated>2018-12-15T14:51:27.463Z</updated>
    
    <content type="html"><![CDATA[<p>分析cloudwu(云风)协程库的具体实现</p><a id="more"></a><h4><span id="引子">引子</span></h4><p>前两篇分析了协程库的基本用法及四大函数具体实现，本篇分析一个协程库的具体例子。</p><p>云风多年之前用C语言实现过一个协程库，采用非对称式、<code>stackful</code>模式、未hook系统函数、不提供协程调度功能。<br>源码只有200多行，实现简洁，非常教科书式，对于协程刚入门用户可谓佳品。</p><p>其代码库地址：<a href="https://github.com/cloudwu/coroutine" target="_blank" rel="noopener">云风协程库</a></p><h4><span id="库的用法">库的用法</span></h4><p>我们先看该库的用法，再研究具体实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"coroutine.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">args</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span></span><br><span class="line">foo(struct schedule * S, <span class="keyword">void</span> *ud) &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">args</span> * <span class="title">arg</span> = <span class="title">ud</span>;</span></span><br><span class="line"><span class="keyword">int</span> start = arg-&gt;n;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"coroutine %d : %d\n"</span>,coroutine_running(S) , start + i);</span><br><span class="line">coroutine_yield(S);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span></span><br><span class="line">test(struct schedule *S) &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">args</span> <span class="title">arg1</span> = &#123;</span> <span class="number">0</span> &#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">args</span> <span class="title">arg2</span> = &#123;</span> <span class="number">100</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> co1 = coroutine_new(S, foo, &amp;arg1);</span><br><span class="line"><span class="keyword">int</span> co2 = coroutine_new(S, foo, &amp;arg2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"main start\n"</span>);</span><br><span class="line"><span class="keyword">while</span> (coroutine_status(S,co1) &amp;&amp; coroutine_status(S,co2)) &#123;</span><br><span class="line">coroutine_resume(S,co1);</span><br><span class="line">coroutine_resume(S,co2);</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"main end\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> </span><br><span class="line">main() &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">schedule</span> * <span class="title">S</span> = <span class="title">coroutine_open</span>();</span></span><br><span class="line">test(S);</span><br><span class="line">coroutine_close(S);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先根据代码猜测运行意图：创建了2个协程，它们轮流输出<code>start + i</code>。</p><p>编译并运行，输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">main start</span><br><span class="line">coroutine 0 : 0</span><br><span class="line">coroutine 1 : 100</span><br><span class="line">coroutine 0 : 1</span><br><span class="line">coroutine 1 : 101</span><br><span class="line">coroutine 0 : 2</span><br><span class="line">coroutine 1 : 102</span><br><span class="line">coroutine 0 : 3</span><br><span class="line">coroutine 1 : 103</span><br><span class="line">coroutine 0 : 4</span><br><span class="line">coroutine 1 : 104</span><br><span class="line">main end</span><br></pre></td></tr></table></figure><p>运行结果符合我们的猜测。</p><p>大体用法：<br>通过调用<code>coroutine_open</code>创建协程环境，调用<code>coroutine_new</code>创建协程并传递工作函数指针，调用<code>coroutine_resume</code>授予协程运行权，在协程中调用<code>coroutine_yield</code>将运行权切出。</p><h4><span id="基础数据结构">基础数据结构</span></h4><p>比较重要的两个数据结构<code>schedule</code>、<code>coroutine</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">schedule</span> &#123;</span></span><br><span class="line"><span class="keyword">char</span> <span class="built_in">stack</span>[STACK_SIZE];</span><br><span class="line"><span class="keyword">ucontext_t</span> main;</span><br><span class="line"><span class="keyword">int</span> nco;</span><br><span class="line"><span class="keyword">int</span> cap;</span><br><span class="line"><span class="keyword">int</span> running;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">coroutine</span> **<span class="title">co</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>schedule</code>是所有协程公用的一个环境，其中：</p><ul><li>stack——所有协程运行时的栈空间，新创建协程时在四大函数的<code>getcontext</code>之后，<code>makecontext</code>之前设置，协程运行时会以该空间作为栈空间</li><li>main——主协程，当创建的协程调用<code>coroutine_yield</code>切出控制权，实际上会切到主协程运行</li><li>nco——当前正在运行的协程数量</li><li>cap——协程指针容器的容量</li><li>running——当前正在运行的协程的id，如果在主协程运行，则为-1</li><li>co——指针数组，每一个指针指向一个协程</li></ul><p>内存布局如下：<br><img src="https://blog-1256756464.cos.ap-shanghai.myqcloud.com/image/Jietu20181215-192541.jpg" alt=""></p><p>接下来看看<code>coroutine</code>的具体内容：</p><ul><li>func——协程运行时的工作函数</li><li>ud——工作函数的附属参数</li><li>ctx——协程的context</li><li>sch——该协程归属的<code>schedule</code></li><li>cap——拷贝栈时候申请的内存的容量</li><li>size——拷贝栈后的有效数据大小</li><li>status——协程状态</li><li>stack——拷贝栈数据申请的空间</li></ul><p>这里解释一下<code>coroutine</code>结构中的<code>stack</code>的作用：</p><p>由于协程运行时需要栈空间，我们可以选择给每个协程单独申请一块空间(例如：1M大小)，而每个协程运行时候所需空间大小不一，如果空间过小协程运行时候会由于空间不足而栈溢出，如果空间太大则整体空间浪费严重。<br>所以这里采用所有协程公用一块大空间，当协程切出时，把自己运行时候的栈内容一并拷贝，当控制权再次切回来时候，把自己的栈内容还原到公共栈空间。</p><p>示意图如下：<br><img src="https://blog-1256756464.cos.ap-shanghai.myqcloud.com/image/Jietu20181215-204455.jpg" alt=""></p><p>这里可以预见当协程切换时候，涉及到大量的内存拷贝操作，这里可能成为瓶颈，如此，便可以采用独立栈结构——即每个协程一个独立栈空间。</p><h4><span id="具体实现">具体实现</span></h4><p>有了以上对两个基础数据结构的分析，接下来分析具体实现代码就比较容易。</p><h5><span id="coroutine_open"><code>coroutine_open</code></span></h5><p>内容比较简单，主要是分配空间容纳<code>coroutine</code>的指针</p><h5><span id="coroutine_close"><code>coroutine_close</code></span></h5><p>没什么好说的</p><h5><span id="coroutine_new"><code>coroutine_new</code></span></h5><p>新建协程的主要函数，在其中，如果<code>schedule</code>中容纳协程指针的空间不足，会进行扩容。<br>这个实现里面有一个<strong>比较有意思的点</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;S-&gt;cap;i++) &#123;</span><br><span class="line"><span class="keyword">int</span> id = (i+S-&gt;nco) % S-&gt;cap;</span><br><span class="line"><span class="keyword">if</span> (S-&gt;co[id] == <span class="literal">NULL</span>) &#123;</span><br><span class="line">S-&gt;co[id] = co;</span><br><span class="line">++S-&gt;nco;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是想找到一个空闲的槽位放置新创建的协程，我们一般会从<code>0</code>开始遍历，如果找到空闲槽位就返回下标，否则<code>i++</code>继续遍历查找。</p><p>但是这里，<code>int id = (i+S-&gt;nco) % S-&gt;cap;</code>，这是什么意思？<br>为什么不是直接取<code>i</code>，而要进行这么复杂的操作？</p><p>如下图：<br><img src="https://blog-1256756464.cos.ap-shanghai.myqcloud.com/image/Jietu20181215-210628.jpg" alt=""></p><p>其中，橙色表示已分配，灰色表示未分配</p><p>由于是从下标<code>0</code>开始遍历查找空闲槽位，这样头部的槽位会优先被选中，导致后续遍历次数增加才能找到空闲槽位。<br>而<code>int id = (i+S-&gt;nco) % S-&gt;cap;</code>，则是倾向于从使用尾区开始查找，很快就能找到空闲槽位。</p><p>但是这样有个问题，随着头部的空间释放，而尾部作为使用中的空间逐渐增加，依然要遍历多次以跨过正在使用中的空间，并达不到作者想要的效果。</p><p>构造如图所示的申请与释放过程：<br><img src="https://blog-1256756464.cos.ap-shanghai.myqcloud.com/image/Jietu20181215-213819.jpg" alt=""></p><ol><li>nco=6，cap=11</li><li>新增一个协程，按照分配算法，从下标<code>5</code>开始往后查找空闲槽位，找到<code>7</code>号槽位</li><li><code>1</code>号槽位协程退出，并释放槽位</li><li>新增一个协程，由于当前nco=6，cap=11，从下标<code>5</code>开始往后查找空闲槽位，找到<code>8</code>号槽位</li></ol><p>以上分析可见，该遍历算法并无实质性优化。</p><ul><li>可以通过记录已经分配的最大下标，从该下标往后查找空闲槽位</li><li>cpu遍历速度非常快，个人认为可以从<code>0</code>开始遍历</li></ul><h5><span id="coroutine_resume"><code>coroutine_resume</code></span></h5><p>将控制权切换到协程的核心函数</p><ul><li>如果协程处于<code>COROUTINE_READY</code>状态，也就是协程刚创建，还未被调度过，则需要初始化协程context</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> COROUTINE_READY:</span><br><span class="line">getcontext(&amp;C-&gt;ctx);</span><br><span class="line">C-&gt;ctx.uc_stack.ss_sp = S-&gt;<span class="built_in">stack</span>;</span><br><span class="line">C-&gt;ctx.uc_stack.ss_size = STACK_SIZE;</span><br><span class="line">C-&gt;ctx.uc_link = &amp;S-&gt;main;</span><br><span class="line">S-&gt;running = id;</span><br><span class="line">C-&gt;status = COROUTINE_RUNNING;</span><br><span class="line"><span class="keyword">uintptr_t</span> ptr = (<span class="keyword">uintptr_t</span>)S;</span><br><span class="line">makecontext(&amp;C-&gt;ctx, (<span class="keyword">void</span> (*)(<span class="keyword">void</span>)) mainfunc, <span class="number">2</span>, (<span class="keyword">uint32_t</span>)ptr, (<span class="keyword">uint32_t</span>)(ptr&gt;&gt;<span class="number">32</span>));</span><br><span class="line">swapcontext(&amp;S-&gt;main, &amp;C-&gt;ctx);</span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>教科书式的用法，先调用<code>getcontext</code>初始化<code>ucontext_t</code>，再设置协程运行时候的栈，<strong>注意</strong>，这里的栈设置为<code>schedule</code>中的stack，也就是公共栈空间。再调用<code>makecontext</code>初始化栈结构，最后调用<code>swapcontext</code>，把控制权从主协程切出。</p><ul><li>如果协程处于<code>COROUTINE_SUSPEND</code>状态，表示其已经被调度过，意味则相关初始化工作已经做过。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> COROUTINE_SUSPEND:</span><br><span class="line"><span class="built_in">memcpy</span>(S-&gt;<span class="built_in">stack</span> + STACK_SIZE - C-&gt;size, C-&gt;<span class="built_in">stack</span>, C-&gt;size);</span><br><span class="line">S-&gt;running = id;</span><br><span class="line">C-&gt;status = COROUTINE_RUNNING;</span><br><span class="line">swapcontext(&amp;S-&gt;main, &amp;C-&gt;ctx);</span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>直接将其保存的栈数据从buffer设置到主stack，然后调用<code>swapcontext</code>，将控制权从主协程切出。</p><h5><span id="coroutine_yield"><code>coroutine_yield</code></span></h5><p>协程主动将控制权交出给主协程<br>由于运行时的栈空间是<code>schedule</code>的stack，也就是公共栈空间，是所有协程公用的。<br>所以需要协程自己保存数据，以待将来再次获得控制权时将数据拷贝回公共栈空间，然后运行。</p><p>如何保存协程的栈空间数据？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span></span><br><span class="line">_save_stack(struct coroutine *C, <span class="keyword">char</span> *top) &#123;</span><br><span class="line"><span class="keyword">char</span> dummy = <span class="number">0</span>;</span><br><span class="line">assert(top - &amp;dummy &lt;= STACK_SIZE);</span><br><span class="line"><span class="keyword">if</span> (C-&gt;cap &lt; top - &amp;dummy) &#123;</span><br><span class="line"><span class="built_in">free</span>(C-&gt;<span class="built_in">stack</span>);</span><br><span class="line">C-&gt;cap = top-&amp;dummy;</span><br><span class="line">C-&gt;<span class="built_in">stack</span> = <span class="built_in">malloc</span>(C-&gt;cap);</span><br><span class="line">&#125;</span><br><span class="line">C-&gt;size = top - &amp;dummy;</span><br><span class="line"><span class="built_in">memcpy</span>(C-&gt;<span class="built_in">stack</span>, &amp;dummy, C-&gt;size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里做了一个假定，栈空间由高地址向低地址增长，拷贝有效数据到协程自己的buffer中保存<br><img src="https://blog-1256756464.cos.ap-shanghai.myqcloud.com/image/Jietu20181215-222926.jpg" alt=""></p><p>设置协程状态，并将控制权交给主协程</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span></span><br><span class="line">coroutine_yield(struct schedule * S) &#123;</span><br><span class="line"><span class="keyword">int</span> id = S-&gt;running;</span><br><span class="line">assert(id &gt;= <span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">coroutine</span> * <span class="title">C</span> = <span class="title">S</span>-&gt;<span class="title">co</span>[<span class="title">id</span>];</span></span><br><span class="line">assert((<span class="keyword">char</span> *)&amp;C &gt; S-&gt;<span class="built_in">stack</span>);</span><br><span class="line">_save_stack(C,S-&gt;<span class="built_in">stack</span> + STACK_SIZE);</span><br><span class="line">C-&gt;status = COROUTINE_SUSPEND;</span><br><span class="line">S-&gt;running = <span class="number">-1</span>;</span><br><span class="line">swapcontext(&amp;C-&gt;ctx , &amp;S-&gt;main);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4><span id="总结">总结</span></h4><p>分析完云风的协程源码，大家可以参考微信开源的libco加强理解，其hook了系统函数，并包含协程调度逻辑，是一个工业级协程库，不过知乎上也有人提到libco实现有bug云云，不一而足。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分析cloudwu(云风)协程库的具体实现&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://www.xiaocc.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>协程原理解析(2)</title>
    <link href="http://www.xiaocc.xyz/2018-12-06/%E5%8D%8F%E7%A8%8B%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%902/"/>
    <id>http://www.xiaocc.xyz/2018-12-06/协程原理解析2/</id>
    <published>2018-12-06T14:00:00.000Z</published>
    <updated>2018-12-14T14:35:42.767Z</updated>
    
    <content type="html"><![CDATA[<p>探讨与分析实现协程依赖的四大函数</p><a id="more"></a><h4><span id="背景">背景</span></h4><p>接上篇讲到协程的实现需要依赖四大函数：</p><ul><li><code>int getcontext(ucontext_t *ucp);</code></li><li><code>void makecontext(ucontext_t *ucp, void (*func)(), int argc, ...);</code></li><li><code>int swapcontext(ucontext_t *oucp, ucontext_t *ucp);</code></li><li><code>int setcontext(const ucontext_t *ucp);</code></li></ul><p>本篇具体分析这四大函数的功能与实现，代码阅读工具采用：<br><a href="https://code.woboq.org/" target="_blank" rel="noopener">woboq在线源码阅读平台</a></p><h4><span id="实际例子">实际例子</span></h4><p>先看看使用四大函数构造协程的一个简单例子，例子中函数<code>f1</code>、<code>f2</code>交替运行。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ucontext.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//main-&gt;f1-&gt;f2</span></span><br><span class="line"><span class="comment">//ut[0]-&gt;ut[1]-&gt;ut[2]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ucontext_t</span> ut[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="number">10</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"f1:%d\n"</span>, i);</span><br><span class="line">        swapcontext(&amp;ut[<span class="number">1</span>], &amp;ut[<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="number">10</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"f2:%d\n"</span>, i);</span><br><span class="line">        swapcontext(&amp;ut[<span class="number">2</span>], &amp;ut[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> stack_buff[<span class="number">4096</span>];</span><br><span class="line">    <span class="keyword">char</span> stack_buff2[<span class="number">4096</span>];</span><br><span class="line"></span><br><span class="line">    getcontext(&amp;ut[<span class="number">1</span>]);</span><br><span class="line">    ut[<span class="number">1</span>].uc_stack.ss_sp = stack_buff;</span><br><span class="line">    ut[<span class="number">1</span>].uc_stack.ss_size = <span class="keyword">sizeof</span>(stack_buff);</span><br><span class="line">    ut[<span class="number">1</span>].uc_link = &amp;ut[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    makecontext(&amp;ut[<span class="number">1</span>], f1, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    getcontext(&amp;ut[<span class="number">2</span>]);</span><br><span class="line">    ut[<span class="number">2</span>].uc_stack.ss_sp = stack_buff2;</span><br><span class="line">    ut[<span class="number">2</span>].uc_stack.ss_size = <span class="keyword">sizeof</span>(stack_buff2);</span><br><span class="line">    ut[<span class="number">2</span>].uc_link = &amp;ut[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    makecontext(&amp;ut[<span class="number">2</span>], f2, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    swapcontext(&amp;ut[<span class="number">0</span>], &amp;ut[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4><span id="引子">引子</span></h4><p>在Stack Overflow上有一个问题：<br><a href="https://stackoverflow.com/questions/19503925/what-does-the-getcontext-system-call-ucontext-h-really-do" target="_blank" rel="noopener">What does the getcontext system call (ucontext.h) really do?</a></p><p>提问者问道：</p><ul><li><code>getcontext</code>究竟干了什么</li><li>与<code>makecontext</code>有什么区别</li><li>为什么不能直接定义一个<code>ucontext_t</code>结构，然后初始化并调用<code>makecontext</code>，再使用<code>swapcontext</code>或者<code>setcontext</code>激活context</li><li>为什么不按照man page要求的在调用<code>makecontext</code>之前调用<code>getcontext</code>，激活context就会报错</li></ul><p>为了解决这些疑惑，我们深入到源码级别，看看这些函数到底做了什么。</p><h4><span id="基础结构ucontext_t">基础结构<code>ucontext_t</code></span></h4><p>先看看这个最重要的结构的定义</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ucontext</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ucontext</span> *<span class="title">uc_link</span>;</span></span><br><span class="line">    <span class="keyword">sigset_t</span>         uc_sigmask;</span><br><span class="line">    <span class="keyword">stack_t</span>          uc_stack;</span><br><span class="line">    <span class="keyword">mcontext_t</span>       uc_mcontext;</span><br><span class="line">    ...</span><br><span class="line">&#125; <span class="keyword">ucontext_t</span>;</span><br></pre></td></tr></table></figure><p>其中:<br><code>uc_link</code>表示该context执行完毕之后，下一个需要激活的context<br><code>uc_sigmask</code>主要是该context需要屏蔽的信号<br><code>uc_stack</code>指定context运行时候的栈空间<br><code>mcontext_t</code>的定义依赖于特定平台，主要包含寄存器等结构</p><h4><span id="int-getcontextucontext_t-ucp">int getcontext(ucontext_t *ucp)</span></h4><p><a href="https://code.woboq.org/userspace/glibc/sysdeps/unix/sysv/linux/x86_64/getcontext.S.html" target="_blank" rel="noopener">getcontext在线代码</a></p><p>主要是将当前context的相关寄存器值保存，相当于保护现场</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">movq        (%rsp), %rcx</span><br><span class="line">movq        %rcx, oRIP(%rdi)</span><br><span class="line">leaq        8(%rsp), %rcx         /* Exclude the return address.  */</span><br><span class="line">movq        %rcx, oRSP(%rdi)</span><br></pre></td></tr></table></figure><p>这里需要对C++中函数调用栈熟悉，函数调用时候，先对参数压栈，再压入返回地址，再执行被调函数体指令。</p><p>由于是在当前context中调用得<code>getcontext</code>函数，所以<code>(%rsp)</code>中保存的即是函数返回地址，也就是执行完<code>getcontext</code>这个函数之后需要执行的下一个指令的地址。<br><code>8(%rsp)</code>值即是当前context的栈顶排除返回地址之后的值。</p><p>由于context即是由代码+数据组成，保存了相关寄存器的值主要是<code>rip</code>值，同时把当前栈的<code>rsp</code>值也保存，这样便可以通过这些数据恢复context以再次继续执行。</p><p>这其中还有一个很重要的操作，保存了浮点寄存器相关数据。</p><h4><span id="void-makecontextucontext_t-ucp-void-func-int-argc">void makecontext(ucontext_t <em>ucp, void (</em>func)(), int argc, …)</span></h4><p><a href="https://code.woboq.org/userspace/glibc/sysdeps/unix/sysv/linux/x86_64/makecontext.c.html" target="_blank" rel="noopener">makecontext在线代码</a></p><p>该函数由C语言实现，代码前部的注释中简明介绍了该函数的工作</p><p>该函数主要是进行栈准备工作，并保存相关值到<code>uc_mcontext</code>的寄存器结构中，同时把<code>uc_link</code>值也做了保存，而需要传递给<code>func</code>函数的参数，一部分保存在寄存器中，剩下的保存在栈中。</p><p>栈布局结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">           +-----------------------+</span><br><span class="line">           | next context          |</span><br><span class="line">           +-----------------------+</span><br><span class="line">           | parameter 7-n         |</span><br><span class="line">           +-----------------------+</span><br><span class="line">           | trampoline address    |</span><br><span class="line">%rsp -&gt;    +-----------------------+</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/* Setup context ucp.  */</span><br><span class="line">/* Address to jump to.  */</span><br><span class="line">ucp-&gt;uc_mcontext.gregs[REG_RIP] = (uintptr_t) func;</span><br><span class="line">/* Setup rbx.*/</span><br><span class="line">ucp-&gt;uc_mcontext.gregs[REG_RBX] = (uintptr_t) &amp;sp[idx_uc_link];</span><br><span class="line">ucp-&gt;uc_mcontext.gregs[REG_RSP] = (uintptr_t) sp;</span><br><span class="line"></span><br><span class="line">sp[0] = (uintptr_t) &amp;__start_context;</span><br><span class="line">sp[idx_uc_link] = (uintptr_t) ucp-&gt;uc_link;</span><br></pre></td></tr></table></figure><p>这其中一个巧妙之处在于，如何实现在该context执行完毕后自动激活<code>uc_link</code>并执行？</p><p>在该函数中把返回地址巧妙的设置为<code>__start_context</code>，这样，当<code>func</code>函数执行完毕后即会转到<code>__start_context</code>执行，而在该函数中即可实现激活<code>uc_link</code>并执行。</p><h4><span id="int-swapcontextucontext_t-oucp-ucontext_t-ucp">int swapcontext(ucontext_t <em>oucp, ucontext_t </em>ucp)</span></h4><p><a href="https://code.woboq.org/userspace/glibc/sysdeps/unix/sysv/linux/x86_64/swapcontext.S.html" target="_blank" rel="noopener">swapcontext在线代码</a></p><p>当<code>makecontext</code>做好准备工作后，即由该函数进行context切换，把执行流程切到另外一个context。</p><p>该函数首先将当前context的相关寄存器值保存到<code>oucp</code>中，而第54-57行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">movq        (%rsp), %rcx</span><br><span class="line">movq        %rcx, oRIP(%rdi)</span><br><span class="line">leaq        8(%rsp), %rcx       /* Exclude the return address.  */</span><br><span class="line">movq        %rcx, oRSP(%rdi)</span><br></pre></td></tr></table></figure><p>当前<code>rsp</code>指向的地址中存储的即是返回地址，也就是调用<code>swapcontext</code>后当前协程需要执行的下一个指令地址。<br><code>swapcontext</code>函数没有返回值，因为在其内部会发生执行流程的跳转，控制权会转移到另外的context。<br><code>8(%rsp)</code>的值即是排除返回地址后的当前栈顶地址。<br>保存当前context的相关信息后，将来控制权再切回来时，就能正确的恢复现场。</p><p>剩下的工作即是用<code>ucp</code>中保存的信息，设置相关寄存器值，如<code>rsp</code>、<code>rbp</code>等。<br>我们知道程序的指令寄存器为<code>rip</code>，只有改变该寄存器值才能改变程序的执行流程，关键在于函数底部的第231-248行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/* The following ret should return to the address set with</span><br><span class="line">        getcontext.  Therefore push the address on the stack.  */</span><br><span class="line">movq        oRIP(%rdx), %rcx</span><br><span class="line">pushq        %rcx</span><br><span class="line">/* Setup registers used for passing args.  */</span><br><span class="line">movq        oRDI(%rdx), %rdi</span><br><span class="line">movq        oRSI(%rdx), %rsi</span><br><span class="line">movq        oRCX(%rdx), %rcx</span><br><span class="line">movq        oR8(%rdx), %r8</span><br><span class="line">movq        oR9(%rdx), %r9</span><br><span class="line">/* Setup finally %rdx.  */</span><br><span class="line">movq        oRDX(%rdx), %rdx</span><br><span class="line">/* Clear rax to indicate success.  */</span><br><span class="line">xorl        %eax, %eax</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><p>将<code>ucp</code>中保存的<strong>返回地址压栈</strong>，该返回地址即是该协程之前执行<code>swapcontext</code>的那个点，因为只有执行该函数才能将控制权转移给别的协程，现在如果把控制权再切回该协程，下一个需要执行的指令地址是多少呢？<br>即是当初调用<code>swapcontext</code>函数时候的返回地址，然后执行<code>ret</code>指令，该指令将当前栈上的值弹出并保存到<code>rip</code>，到这里控制权完成切换，从协程<code>oucp</code>切换到<code>ucp</code>。</p><h4><span id="int-setcontextconst-ucontext_t-ucp">int setcontext(const ucontext_t *ucp)</span></h4><p><a href="https://code.woboq.org/userspace/glibc/sysdeps/unix/sysv/linux/x86_64/setcontext.S.html" target="_blank" rel="noopener">setcontext在线代码</a></p><p>该函数功能与<code>swapcontext</code>类似，将控制权转移到<code>ucp</code>中。</p><h4><span id="为什么必须调用getcontext">为什么必须调用<code>getcontext</code></span></h4><p>在<code>getcontext</code>中保存了浮点寄存器相关值，该值在<code>swapcontext</code>、<code>setcontext</code>中都有使用，否则调用时会发生异常。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;探讨与分析实现协程依赖的四大函数&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://www.xiaocc.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>协程原理解析(1)</title>
    <link href="http://www.xiaocc.xyz/2018-12-05/%E5%8D%8F%E7%A8%8B%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%901/"/>
    <id>http://www.xiaocc.xyz/2018-12-05/协程原理解析1/</id>
    <published>2018-12-05T15:00:00.000Z</published>
    <updated>2018-12-05T15:12:41.992Z</updated>
    
    <content type="html"><![CDATA[<p>探讨C/C++协程实现原理，分析协程实现依赖的四大函数</p><a id="more"></a><h4><span id="背景">背景</span></h4><p>前两天跟同事讨论C++中的协程，我提到微信开源的协程库libco，性能高、稳定性好。<br>在看点项目后期，有些模块也引入该协程库，以解决异步调用复杂，代码逻辑难以梳理，维护性差，出bug后不易排查等问题。<br>引入协程库后，代码以顺序性书写，易于理解，而执行时则是异步调用，性能不减。</p><h4><span id="协程用法">协程用法</span></h4><p>协程库核心即是在用户线程中模拟操作系统线程并进行调度，一个协程A调用网络写请求write后，然后调用<code>yield</code>将控制权交出，协程调度器从所有协程中获取满足唤醒条件的协程（如：远端服务返回数据或sleep时间到等等），对其调用<code>resume</code>，使该协程继续执行。</p><p>例如协程版网络库封装如下函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SendAndRecv</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span>&amp; recv_data, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; send_data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//通过socket发送数据</span></span><br><span class="line">    write(...);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//将协程控制权交出</span></span><br><span class="line">    yield();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//远端服务器返回数据后，该协程被调度器resume，从yield后继续执行</span></span><br><span class="line">    read(...);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，上层逻辑代码写起来非常直接，例如某个处理需要先请求A服务获取特定数据，再请求B服务获取特定数据，两种数据整合后再返回给请求方：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DoTask</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//请求A服务获取数据</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> a_recv_data;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//构造请求数据包</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> a_send_data = ....;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//使用协程库接口</span></span><br><span class="line">    SendAndRecv(a_recv_data, a_send_data);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//请求B服务获取数据</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> b_recv_data;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//构造请求数据包</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> b_send_data = ....;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//使用协程库接口</span></span><br><span class="line">    SendAndRecv(b_recv_data, b_send_data);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//整合A、B服务的数据</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不采用协程方式，要么：</p><ol><li>使用网络库同步版API，该代码书写方式在请求量大时候，服务性能不足，线程大量时间阻塞在等待远端服务返回数据，整体吞吐量不高。</li><li>针对每个请求，改造与管理session，并与事件框架结合，待远端服务返回数据，事件框架通知后采用回调形式。这样，原本连贯的处理逻辑，会被切分得支离破碎。<br>示例代码如下：</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DoTask</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//构造session</span></span><br><span class="line">    Session* session = m_SessionMgr.AddSession();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//往服务A发送请求以获取数据</span></span><br><span class="line">    <span class="comment">//将session_id发送至服务A，同时服务A将该session_id原样返回</span></span><br><span class="line">    <span class="comment">//构造请求数据包</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> a_send_data = ....;</span><br><span class="line">    SendData(a_send_data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//该函数由事件框架调用，当远端服务器有数据返回时触发</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OnRecvRemoteData</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; recv_data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//从recv_data中解析出session_id</span></span><br><span class="line">    <span class="keyword">uint32_t</span> session_id = GetSessionID(recv_data);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//从session管理器获取session</span></span><br><span class="line">    Session* ps = m_SessionMgr.GetSession(session_id);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//session中有step标记，以区分是服务A返回还是服务B返回</span></span><br><span class="line">    <span class="keyword">if</span> (ps-&gt;step == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//Session结构中缓存A服务返回的数据</span></span><br><span class="line">        ps-&gt;recv_a_data = recv_data;</span><br><span class="line">        </span><br><span class="line">        ps-&gt;step = <span class="number">2</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//请求B服务获取数据</span></span><br><span class="line">        <span class="comment">//同样需要将session_id带至远端</span></span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">string</span> b_send_data = ....;</span><br><span class="line">        SendData(b_send_data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//服务B的数据已经返回</span></span><br><span class="line">        <span class="comment">//可以进行总处理</span></span><br><span class="line">        <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; data_a = ps-&gt;recv_a_data;</span><br><span class="line">        <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; data_b = recv_data;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//核心数据处理流程</span></span><br><span class="line">        ....</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//释放session</span></span><br><span class="line">        m_SessionMgr.DelSession(session_id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过以上方案对比可以发现，采用协程后代码逻辑清晰易懂，同时代码量也更少，出问题后更利于排查。</p><h4><span id="协程原理">协程原理</span></h4><p>协程按类型分为：</p><ul><li><code>非对称式协程</code>，协程之间有调用链关系，一个协程A释放控制权有2种方式<ul><li>通过调用<code>yield</code>，将控制权返还给协程A的创建协程</li><li>通过调用<code>resume</code>，将控制权交给一个子协程</li></ul></li><li><code>对称式协程</code>，与<code>非对称式协程</code>不同，各个协程之间可以互相转移控制权，类似于goto语句，这种方式，即使非常有经验的程序员也很难理清调用流程。同时该协程方式实现困难，性能不高。</li></ul><p>业内实现的C/C++协程基本都采用<code>非对称</code>的协程方式。</p><p>协程实现主要依赖以下四个系统级函数：</p><ul><li><code>int getcontext(ucontext_t *ucp);</code></li><li><code>void makecontext(ucontext_t *ucp, void (*func)(), int argc, ...);</code></li><li><code>int swapcontext(ucontext_t *oucp, ucontext_t *ucp);</code></li><li><code>int setcontext(const ucontext_t *ucp);</code></li></ul><p>相关函数定义均在<code>ucontext.h</code>，通过查询man page可以大略知道各个函数的作用<br>可参考文档：<a href="https://linux.die.net/man/3/makecontext" target="_blank" rel="noopener">文档</a></p><ul><li>getcontext——可以认为是用当前执行环境初始化<code>ucontext_t</code>结构</li><li>makecontext——更改ucp结构，该结构必须先通过调用getcontext进行初始化，同时进行stack相关赋值，待该ucp通过swapcontext或setcontext激活时，其会从func函数开始执行</li><li>swapcontext——把当前执行环境保存到oucp，并激活ucp进行执行</li><li>setcontext——激活ucp并进行执行</li></ul><p>接下来会详细分析这几个函数的实现，并参考云风的协程库进行分析。</p><p>参考文档：</p><ol><li><a href="https://www.zhihu.com/question/52193579" target="_blank" rel="noopener">腾讯开源的 libco 号称千万级协程支持，那个共享栈模式原理是什么?</a></li><li><a href="https://github.com/cloudwu/coroutine" target="_blank" rel="noopener">云风的协程库</a></li><li><a href="https://www.jianshu.com/p/dfd7ac1402f0" target="_blank" rel="noopener">我所理解的ucontext族函数</a></li><li><a href="https://code.woboq.org/" target="_blank" rel="noopener">woboq源码阅读网站</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;探讨C/C++协程实现原理，分析协程实现依赖的四大函数&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://www.xiaocc.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>C++17学习笔记(3)——容器、指针、线程</title>
    <link href="http://www.xiaocc.xyz/2018-09-30/C++17%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/"/>
    <id>http://www.xiaocc.xyz/2018-09-30/C++17学习笔记3/</id>
    <published>2018-09-30T12:30:00.000Z</published>
    <updated>2018-09-30T14:22:01.823Z</updated>
    
    <content type="html"><![CDATA[<p>C++17学习笔记系列</p><a id="more"></a><ol><li><p>容器</p><ul><li><p>std::array<br>与 std::vector 区别：栈内存、固定大小</p></li><li><p>std::forward_list<br>单链表、不提供size()函数</p></li><li><p>无序容器</p><ul><li>unordered_map</li><li>unordered_multimap</li><li>unordered_set</li><li>unordered_multiset</li></ul></li><li><p>元组 std::tuple</p><ul><li>std::make_tuple 构造元组</li><li>std::get&lt;N&gt;() 获得元组中某个位置的值<br> 其中N为编译期固定值，包括数字常量值、constexpr值<br> 如何在运行期获取tuple中的值，接下来会介绍</li><li><p>std::tie 从tuple中获取解值</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// packing/unpacking tuples</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;     // std::cout</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;        // std::tuple, std::make_tuple, std::tie</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> myint;</span><br><span class="line">  <span class="keyword">char</span> mychar;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::tuple&lt;<span class="keyword">int</span>,<span class="keyword">float</span>,<span class="keyword">char</span>&gt; mytuple;</span><br><span class="line"></span><br><span class="line">  mytuple = <span class="built_in">std</span>::make_tuple (<span class="number">10</span>, <span class="number">2.6</span>, <span class="string">'a'</span>);          <span class="comment">// packing values into tuple</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::tie (myint, <span class="built_in">std</span>::ignore, mychar) = mytuple;   <span class="comment">// unpacking tuple into variables</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"myint contains: "</span> &lt;&lt; myint &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"mychar contains: "</span> &lt;&lt; mychar &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>在运行期索引tuple值<br>利用 <code>boost::variant</code> 配合变长模板参数的黑魔法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/variant.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">size_t</span> n, <span class="keyword">typename</span>... T&gt;</span><br><span class="line">boost::variant&lt;T...&gt; _tuple_index(<span class="keyword">size_t</span> i, <span class="keyword">const</span> <span class="built_in">std</span>::tuple&lt;T...&gt;&amp; tpl) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == n)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">std</span>::get&lt;n&gt;(tpl);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="keyword">sizeof</span>...(T) - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">std</span>::out_of_range(<span class="string">"越界."</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> _tuple_index&lt;(n &lt; <span class="keyword">sizeof</span>...(T)<span class="number">-1</span> ? n+<span class="number">1</span> : <span class="number">0</span>)&gt;(i, tpl);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span>... T&gt;</span><br><span class="line">boost::variant&lt;T...&gt; tuple_index(<span class="keyword">size_t</span> i, <span class="keyword">const</span> <span class="built_in">std</span>::tuple&lt;T...&gt;&amp; tpl) &#123;</span><br><span class="line">    <span class="keyword">return</span> _tuple_index&lt;<span class="number">0</span>&gt;(i, tpl);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解释：</strong></p><ol><li><code>std::tuple</code> tpl 在其定义时，其能保存的元素个数已经确定，并且在编译期可以获取，也就是 <code>sizeof...(T)</code> 。</li><li><code>std::get&lt;N&gt;()</code> 中 <code>N</code> 只能是常量值，既然要运行期获取tpl中某index值，那么该index可取值区间为 <code>[0, Len - 1]</code> ，那么可以采取一种笨方法，通过获取 <code>get&lt;0&gt;,get&lt;1&gt; ... get&lt;Len - 1&gt;</code> 逐个与index比较，最终即可获取到下标为index的值。</li><li><code>tuple_index</code> 函数，从 <code>0</code> 开始尝试，并在编译期实例化大量的 <code>_tuple_index</code> 函数，即 <code>_tuple_index&lt;0&gt;</code>，<code>_tuple_index&lt;1&gt;</code>，… <code>_tuple_index&lt;Len - 1&gt;</code>，而其中每个函数即可调用 <code>std::get&lt;0&gt;</code>，<code>std::get&lt;1&gt;</code>，… <code>std::get&lt;Len - 1&gt;</code>。</li><li>详细过程：<br>在 <code>_tuple_index&lt;0&gt;</code> 中判断 <code>i</code>，<code>n</code> 值，如果不符，继续往上递归增长式调用 <code>_tuple_index&lt;1&gt;</code>，再次判断 <code>i</code>，<code>n</code>值，如果不符，则调用 <code>_tuple_index&lt;2&gt;</code>，如此往复，直到某个 <code>n</code> 值与 <code>i</code> 相等，则此时调用 <code>std::get&lt;n&gt;(tpl)</code> 获取tpl中值。</li></ol><p><strong>使用方式：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">tuple_len</span><span class="params">(T &amp;tpl)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">std</span>::tuple_size&lt;T&gt;::value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i != tuple_len(new_tuple); ++i) &#123;</span><br><span class="line">    <span class="comment">// 运行期索引</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; tuple_index(i, new_tuple) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li><li><p>指针</p><ul><li><p>std::shared_ptr<br>std::make_shared</p></li><li><p>std::unique_ptr<br>一种独占的智能指针，它禁止其他智能指针与其共享同一个对象，从而保证代码的安全<br>可以利用 <code>std::move</code> 转移给其它的 unique_ptr<br>std::make_unique</p></li><li><p>std::weak_ptr<br>解决 <code>std::shared_ptr</code> 之间循环引用，析构时无法释放问题</p></li></ul></li><li><p>线程与并发</p><ul><li><p>std::thread</p></li><li><p>std::mutex</p><ul><li>std::lock_guard<br> RAII，构造函数lock，析构函数unlock</li><li>std::unique_lock<br> 默认行为与std::lock_guard一致，但是提供lock、unlock函数手动操作mutex</li></ul></li><li><p>std::packaged_task、std::future、std::promise<br>关于 <code>std::future</code>，<code>std::promise</code> 会再写一篇详细介绍</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::packaged_task&lt;<span class="keyword">int</span>()&gt; task([]()&#123;</span><br><span class="line">            <span class="built_in">std</span>::this_thread::sleep_for(<span class="built_in">std</span>::chrono::seconds(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::future&lt;<span class="keyword">int</span>&gt; f = task.get_future();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::thread(<span class="built_in">std</span>::move(task)).detach();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"wait result ..."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    f.wait();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> r = f.get();</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"get result:"</span> &lt;&lt; r &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>std::conditiaon_variable 信号量</p></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C++17学习笔记系列&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://www.xiaocc.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>C++17学习笔记(2)——语言运行期强化</title>
    <link href="http://www.xiaocc.xyz/2018-09-19/C++17%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/"/>
    <id>http://www.xiaocc.xyz/2018-09-19/C++17学习笔记2/</id>
    <published>2018-09-19T00:30:00.000Z</published>
    <updated>2018-09-19T05:01:19.705Z</updated>
    
    <content type="html"><![CDATA[<p>C++17学习笔记系列</p><a id="more"></a><ol><li><p>Lambda表达式</p><ul><li><p>Lambda 表达式的基本语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[捕获列表](参数列表) mutable(可选) 异常属性 -&gt; 返回类型 &#123;</span><br><span class="line">    // 函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>捕获列表</p><ul><li><p>值捕获</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">learn_lambda_func_1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> value_1 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">auto</span> copy_value_1 = [value_1] &#123;</span><br><span class="line">        <span class="keyword">return</span> value_1;</span><br><span class="line">    &#125;;</span><br><span class="line">    value_1 = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">auto</span> stored_value_1 = copy_value_1();</span><br><span class="line">    <span class="comment">// 这时, stored_value_1 == 1, 而 value_1 == 100.</span></span><br><span class="line">    <span class="comment">// 因为 copy_value_1 在创建时就保存了一份 value_1 的拷贝</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>引用捕获</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">learn_lambda_func_2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> value_2 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">auto</span> copy_value_2 = [&amp;value_2] &#123;</span><br><span class="line">        <span class="keyword">return</span> value_2;</span><br><span class="line">    &#125;;</span><br><span class="line">    value_2 = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">auto</span> stored_value_2 = copy_value_2();</span><br><span class="line">    <span class="comment">// 这时, stored_value_2 == 100, value_1 == 100.</span></span><br><span class="line">    <span class="comment">// 因为 copy_value_2 保存的是引用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>隐式捕获</li></ul><blockquote><p>手动书写捕获列表有时候是非常复杂的，这种机械性的工作可以交给编译器来处理，这时候可以在捕获列表中写一个 <code>&amp;</code> 或 <code>=</code> 向编译器声明采用 <code>引用捕获</code>或者 <code>值捕获</code>。</p></blockquote> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[] 空捕获列表</span><br><span class="line">[name1, name2, ...] 捕获一系列变量</span><br><span class="line">[&amp;] 引用捕获, 让编译器自行推导捕获列表</span><br><span class="line">[=] 值捕获, 让编译器执行推导应用列表</span><br></pre></td></tr></table></figure></li></ul></li><li><p>泛型Lambda</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> add = [](<span class="keyword">auto</span> x, <span class="keyword">auto</span> y) &#123;</span><br><span class="line">    <span class="keyword">return</span> x+y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">add(<span class="number">1.1</span>, <span class="number">2.2</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>函数对象包装器</p><ul><li>std::function</li><li><p>std::bind/std::placeholder</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">foo2</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + (<span class="number">2</span> * b) + (<span class="number">3</span> * c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>::placeholders;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>)&gt; func = foo;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> important = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">std</span>::function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>)&gt; func2 = [&amp;](<span class="keyword">int</span> a) -&gt; <span class="keyword">int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + important + <span class="number">5</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; func(<span class="number">10</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; func2(<span class="number">4</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> bindfoo = <span class="built_in">std</span>::bind(foo2, <span class="number">5</span>, _1, _2);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; bindfoo(<span class="number">3</span>, <span class="number">4</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>右值引用</p><ul><li>左值</li><li>右值<ul><li>纯右值</li><li>将亡值</li></ul></li><li>左值引用</li><li>右值引用<blockquote><p>需要拿到一个将亡值，就需要用到右值引用的申明：T &amp;&amp;，其中 T 是类型。右值引用的声明让这个临时值的生命周期得以延长、只要变量还活着，那么将亡值将继续存活。</p></blockquote></li></ul><ul><li>移动语义<ul><li>移动构造函数</li><li>移动赋值函数</li></ul></li><li><p>完美转发<br>  一个声明的右值引用其实是一个左值</p>   <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span>&amp;&amp; rv2 = lv1 + lv2; <span class="comment">// 合法, 右值引用延长临时对象生命周期</span></span><br><span class="line">rv2 += <span class="string">"Test"</span>; <span class="comment">// 合法, 非常量引用能够修改临时变量</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; rv2 &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; <span class="comment">// string,string,string,Test</span></span><br><span class="line"></span><br><span class="line">reference(rv2); <span class="comment">// 输出左值</span></span><br></pre></td></tr></table></figure><p>   rv2 虽然引用了一个右值，但由于它是一个引用，所以 rv2 依然是一个左值</p></li></ul></li></ol><p><strong>引用坍缩规则：</strong></p><blockquote><p>在传统 C++ 中，我们不能够对一个引用类型继续进行引用，但 C++ 由于右值引用的出现而放宽了这一做法，从而产生了引用坍缩规则，允许我们对引用进行引用，既能左引用，又能右引用。</p></blockquote><table><thead><tr><th style="text-align:center">函数形参类型</th><th style="text-align:center">实参参数类型</th><th style="text-align:center">推导后函数形参类型</th></tr></thead><tbody><tr><td style="text-align:center">T&amp;</td><td style="text-align:center">左引用</td><td style="text-align:center">T&amp;</td></tr><tr><td style="text-align:center">T&amp;</td><td style="text-align:center">右引用</td><td style="text-align:center">T&amp;</td></tr><tr><td style="text-align:center">T&amp;&amp;</td><td style="text-align:center">左引用</td><td style="text-align:center">T&amp;</td></tr><tr><td style="text-align:center">T&amp;&amp;</td><td style="text-align:center">右引用</td><td style="text-align:center">T&amp;&amp;</td></tr></tbody></table><blockquote><p>因此，模板函数中使用 T&amp;&amp; 不一定能进行右值引用，当传入左值时，此函数的引用将被推导为左值。更准确的讲，无论模板参数是什么类型的引用，当且仅当实参类型为右引用时，模板参数才能被推导为右引用类型。这才使得 v 作为左值的成功传递。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reference</span><span class="params">(<span class="keyword">int</span>&amp; v)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"左值引用"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reference</span><span class="params">(<span class="keyword">int</span>&amp;&amp; v)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"右值引用"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pass</span><span class="params">(T&amp;&amp; v)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"普通传参:"</span>;</span><br><span class="line">    reference(v);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"std::move 传参:"</span>;</span><br><span class="line">    reference(<span class="built_in">std</span>::move(v));</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"std::forward 传参:"</span>;</span><br><span class="line">    reference(<span class="built_in">std</span>::forward&lt;T&gt;(v));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"传递右值:"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    pass(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"传递左值:"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">int</span> v = <span class="number">1</span>;</span><br><span class="line">    pass(v);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">传递右值:</span><br><span class="line">普通传参:左值引用</span><br><span class="line">std::move 传参:右值引用</span><br><span class="line">std::forward 传参:右值引用</span><br><span class="line">传递左值:</span><br><span class="line">普通传参:左值引用</span><br><span class="line">std::move 传参:右值引用</span><br><span class="line">std::forward 传参:左值引用</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C++17学习笔记系列&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://www.xiaocc.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>C++17学习笔记(1)——语言可用性强化</title>
    <link href="http://www.xiaocc.xyz/2018-09-18/c++17%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/"/>
    <id>http://www.xiaocc.xyz/2018-09-18/c++17学习笔记1/</id>
    <published>2018-09-18T03:50:00.000Z</published>
    <updated>2018-09-20T14:27:28.270Z</updated>
    
    <content type="html"><![CDATA[<p>C++17学习笔记系列1</p><a id="more"></a><ol><li>nullptr</li><li>constexpr</li><li>if/switch 中定义临时变量</li><li><p>初始化列表 <code>initializer_list</code></p><ul><li><p>类构造函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MagicFoo(<span class="built_in">std</span>::<span class="built_in">initializer_list</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">list</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">std</span>::<span class="built_in">initializer_list</span>&lt;<span class="keyword">int</span>&gt;::const_iterator it = <span class="built_in">list</span>.begin();</span><br><span class="line">            it != <span class="built_in">list</span>.end();</span><br><span class="line">            ++it)</span><br><span class="line">    &#123;</span><br><span class="line">        vec_.push_back(*it);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>普通函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">initializer_list</span>&lt;T&gt; <span class="built_in">list</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">typename</span> <span class="built_in">std</span>::<span class="built_in">initializer_list</span>&lt;T&gt;::const_iterator it = <span class="built_in">list</span>.begin();</span><br><span class="line">            it != <span class="built_in">list</span>.end();</span><br><span class="line">            ++it)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>统一的初始化语法<br><code>MagicFoo magicFoo = {1, 2, 3, 4, 5};</code> </p></li></ul></li><li><p>结构化绑定 tuple</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::tuple&lt;<span class="keyword">int</span>, <span class="keyword">double</span>, <span class="built_in">std</span>::<span class="built_in">string</span>&gt; f() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">std</span>::make_tuple(<span class="number">1</span>, <span class="number">2.3</span>, <span class="string">"456"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> [x, y, z] = f();</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">", "</span> &lt;&lt; y &lt;&lt; <span class="string">", "</span> &lt;&lt; z &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="6"><li><p>类型推导</p><ul><li><p>auto 针对变量进行类型推导<br>   auto 不能用于函数传参<br>   auto 不能用于推导数组类型<br>   <code>auto i = 5;  // i 被推导为 int</code></p></li><li><p>decltype 针对表达式进行类型推导</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">decltype</span>(表达式)</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">auto</span> y = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">decltype</span>(x+y) z;</span><br></pre></td></tr></table></figure></li><li><p>尾返回类型推导</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//C++11</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</span><br><span class="line">auto add2(T x, U y) -&gt; decltype(x+y)&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//C++14</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">add3</span><span class="params">(T x, U y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>decltype(auto) 函数转发的返回类型推导</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="function"><span class="built_in">string</span>  <span class="title">lookup1</span><span class="params">()</span></span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="function"><span class="built_in">string</span>&amp; <span class="title">lookup2</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">decltype</span>(<span class="keyword">auto</span>) look_up_a_string_1() &#123;</span><br><span class="line">    <span class="keyword">return</span> lookup1();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">decltype</span>(<span class="keyword">auto</span>) look_up_a_string_2() &#123;</span><br><span class="line">    <span class="keyword">return</span> lookup2();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>区间 for 迭代</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">auto</span> itr = <span class="built_in">std</span>::find(vec.begin(), vec.end(), <span class="number">3</span>); itr != vec.end())</span><br><span class="line">        *itr = <span class="number">4</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> element : vec)</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; element &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; <span class="comment">// read only</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;element : vec) &#123;</span><br><span class="line">        element += <span class="number">1</span>;                      <span class="comment">// writeable</span></span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> element : vec)</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; element &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; <span class="comment">// read only</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="8"><li><p>模板</p><ul><li><p>变长参数模板<br><code>template&lt;typename... Ts&gt; class Magic;</code></p><blockquote><p>既然是任意形式，所以个数为 <code>0</code> 的模板参数也是可以的：<br>  <code>class Magic&lt;&gt; nothing;</code></p><p>如果不希望产生的模板参数个数为 <code>0</code> ，可以手动的定义至少一个模板参数：<br>  <code>template&lt;typename Require, typename... Args&gt; class Magic;</code></p></blockquote></li><li><p>应用到模板函数上：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>... Args&gt; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printf</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;str, Args... args)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>如何对参数解包：</p><ul><li><p>参数个数 <code>sizeof…</code></p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">magic</span><span class="params">(Args... args)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>...(args) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对参数解包</p><ul><li><p>递归模板函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T0&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printf</span><span class="params">(T0 value)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; value &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printf</span><span class="params">(T value, Args... args)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; value &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">printf</span>(args...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="string">"123"</span>, <span class="number">1.1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>c++17中简略写法</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T0, <span class="keyword">typename</span>... T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printf</span><span class="params">(T0 t0, T... t)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; t0 &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    if constexpr (sizeof...(t) &gt; 0) printf(t...);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>初始化列表展开</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编译这个代码需要开启 -std=c++14</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">print</span><span class="params">(T value, Args... args)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; value &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">std</span>::<span class="built_in">initializer_list</span>&lt;T&gt;&#123;([&amp;] &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; args &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        &#125;(), value)...&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    print(<span class="number">1</span>, <span class="number">2.1</span>, <span class="string">"123"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong>折叠表达式</strong></p><blockquote><p><a href="https://zh.cppreference.com/w/cpp/language/fold" target="_blank" rel="noopener">折叠表达式 cppreference</a><br><a href="https://blog.csdn.net/zwvista/article/details/53981696" target="_blank" rel="noopener">C++17尝鲜：fold expression</a></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> ... T&gt;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">sum</span><span class="params">(T ... t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (t + ...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>面向对象</p><ul><li>委托构造</li><li>继承构造</li><li>显式虚函数重载 <code>override、final</code></li><li><p>显式禁用默认函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Magic</span> &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        Magic() = <span class="keyword">default</span>; <span class="comment">// 显式声明使用编译器生成的构造</span></span><br><span class="line">        Magic&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Magic&amp;) = <span class="keyword">delete</span>; <span class="comment">// 显式声明拒绝编译器生成构造</span></span><br><span class="line">        Magic(<span class="keyword">int</span> magic_number);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C++17学习笔记系列1&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://www.xiaocc.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>穷，是一种病</title>
    <link href="http://www.xiaocc.xyz/2018-09-12/%E7%A9%B7%E6%98%AF%E4%B8%80%E7%A7%8D%E7%97%85/"/>
    <id>http://www.xiaocc.xyz/2018-09-12/穷是一种病/</id>
    <published>2018-09-12T15:00:00.000Z</published>
    <updated>2018-09-18T03:45:44.421Z</updated>
    
    <content type="html"><![CDATA[<p>观看《我不是药神》后，一直想就这个话题写点东西，三十年的邻居突患病离世，更添些许压抑。</p><a id="more"></a><h4><span id="背景">背景</span></h4><p>前段时间跟老婆一起看了口碑爆棚的神作《我不是药神》，影片很好的反应当代现实与社会问题。<br>特别是里面有句台词，<code>世上有一种病叫穷病——没得治</code>。</p><p>在这里不想讨论大道理，如：医药公司是否过于暴利、政府的缺位等等，只想说一下亲身体会。</p><h4><span id="亲人患病">亲人患病</span></h4><h5><span id="初诊">初诊</span></h5><p>大约7月份的时候，堂弟突然微信联系我，发来一些检查报告，是他岳母的。<br>检查报告先出来，周一才能找医生会诊，心里比较着急，让我找同学帮忙问问报告内容具体什么意思。</p><p>赶紧与同学联系，她是麻醉师，医院各科室都认识人。<br>她找人看了一下检查报告，对方提出需要查看图片影像，以增加信息辅助判断，但是根据检查报告初步怀疑肺癌。</p><p>收到信息后，马上给堂弟打电话，他对此已有所预感，待周一拿上相关资料与医生当面会诊。</p><p><strong>为什么会这样？</strong></p><p>犹如晴天霹雳，今年初的时候还到他们家做客，岳母才47岁，非常年轻，刚当上外婆，宝宝才1岁，为什么这个不幸的病会找上她。<br>且宝宝刚出生时，由于感染，在中心医院住院治疗一个多月，没有明显恢复，后又转院到同济医院，前后花了十多万，举债累累。<br>万幸的是治疗后，宝宝没有后遗症、恢复很好，让人欣慰。</p><p>去年宝宝患病，今年岳母患病，让这个本就不富裕的家庭，更捉襟见肘。</p><p>这可如何是好？虽还没确诊，但我已有如此担忧。</p><h5><span id="确诊">确诊</span></h5><p>周一下午，打电话给堂弟询问具体诊断结果，医生初步怀疑肺癌，需要做病理检查，进一步确认。</p><p>按照医生的要求，一项项检查，焦急的等等……</p><p>周五堂弟打电话过来，确诊：<strong>肺腺癌晚期</strong>。<br>医生反馈由于是晚期，且带有一些扩散，无法进行手术治疗，可以尝试进行<strong>靶向治疗</strong>，但是需要先进行基因检测。</p><p>赶紧打电话给同学，将最新信息同步于她，并寻求建议、打听基因检测价格、靶向药物价格等等。</p><h5><span id="靶向治疗">靶向治疗</span></h5><p>预约基因检测，待拿到检测结果后，再预约医生制定具体治疗方案。<br>基因检测结果显示，可以使用靶向药物，药名：<strong>吉非替尼</strong>，俗名：<strong>易瑞沙</strong>。</p><p>这个药已经国产，一盒大约2000多块钱，疗程10天，一个月大约6000多块钱。</p><p>虽然国产后已便宜许多，但是一个月6000多的药物费用，依然让这个家庭特别吃力。</p><p>这时想起《我不是药神》的情节，这个药有没有印度版？价格怎么样？</p><p>立马在各种同学群找他们帮忙，打听药物渠道、价格如何、疗效怎样。</p><p>由于《药神》上映后，海关检查特别严格，药物不好带，他们多方打听也没有合适渠道。</p><p>不放弃，最后找到一个渠道，印度直接邮寄过来，先来一盒看看疗效，以验证药物是否靠谱，最后药价大约是正版药的<strong>1/5</strong>。</p><p>堂弟将岳母接回老家吃药静养，带带宝宝，放松心情，每半个月复查一次。</p><p>这一切才刚刚开始。</p><h4><span id="隔壁邻居患病离世">隔壁邻居患病离世</span></h4><p>周六定时给家里打电话，老爸突然说道，隔壁华爷爷去世。</p><p>怎么可能？</p><p>年初回家过年，还跟他打招呼着呢。<br>他喜欢喝酒，喝完后拿着泡着茶的保温杯，嘴里叼一根烟，一踱一踱的走着，笑呵呵的对我说，“回来过年啦”，“是啊，过年必须要回来呀，城市过年没气氛，有钱没钱，回家过年”。</p><p>他腿是去年摔断的，这事儿也是听老爸说的。</p><p>当时吃了酒席喝了酒，主人家要送他回家。他偏不，倔得很，非要自己骑摩托车回来，不幸摔跤，休养了约半年才好。</p><p>老爸说，华爷爷是今年3-4月份村里大检查时排查出来的，<strong>肺癌晚期</strong>。<br>他又不配合治疗，不打针、不吃药，按他的说法，“还不如拿治病的钱喝酒呢，反正治不好，多花些冤枉钱”。</p><p>也可能是，不想为子女添加负担吧。农村年收入才2-3万元，按最便宜的治疗方案，初期怎么也得花费大几万，后面每个月还有固定开销，对农村家庭真是难以承受。</p><p><strong>穷，真是一种病</strong></p><p>9月6号当晚，可能是疼痛难忍，自己喝药走了。</p><p>这就是华爷爷，看着我长大的华爷爷，就这样走了。</p><p>俗话说，远亲不如近邻，特别是在农村，这种感受尤为强烈。</p><p>深深的无力感，就我认识的人，患癌症的就有7-8个人。</p><p>三姨妈淋巴癌晚期带转移，已经化疗几个疗程，人都瘦得不行，靶向药：<strong>美罗华</strong>，50ml药价25000。<br>姑爹，胃癌，4月份刚去世。<br>舅舅，肺癌，16年去世。<br>堂弟岳母、隔壁华爷爷、隔壁健爹刚45岁胃癌已去世……</p><p><strong>这个世道怎么了？</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;观看《我不是药神》后，一直想就这个话题写点东西，三十年的邻居突患病离世，更添些许压抑。&lt;/p&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://www.xiaocc.xyz/categories/%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>linux hook机制研究</title>
    <link href="http://www.xiaocc.xyz/2018-09-08/linux%E4%B8%8Bhook%E6%9C%BA%E5%88%B6%E7%A0%94%E7%A9%B6/"/>
    <id>http://www.xiaocc.xyz/2018-09-08/linux下hook机制研究/</id>
    <published>2018-09-08T15:00:00.000Z</published>
    <updated>2018-12-15T11:15:43.397Z</updated>
    
    <content type="html"><![CDATA[<p>在研究C++中协程机制时，发现有些实现通过hack掉glibc的read、write等IO操作函数，以达到迁移协程框架时，最小化代码改动，遂小小研究一下linux下的hook机制。</p><a id="more"></a><h4><span id="引子">引子</span></h4><p>在linux下调用C库中的函数，主要是调用得 <code>libc.so.6</code> 这个动态链接库中的函数。<br>那么我们有没有办法让应用程序改调其它函数，而应用程序无感知，也就是hack掉应用程序中调用的某些函数。</p><p><img src="https://blog-1256756464.cos.ap-shanghai.myqcloud.com/image/Jietu20180908-232110.jpg" alt=""></p><p>由于是调用得动态链接库中函数，我们可以通过劫持该函数的方式引入额外处理。<br>例如通过劫持 <code>malloc</code>、<code>free</code> 来追踪内存使用情况等等。</p><h4><span id="实际操作">实际操作</span></h4><h5><span id="so文件">so文件</span></h5><p>我们先创建一个 <code>my_hook.c</code> 文件，并编写需要hook的函数实现。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> unlikely(x) __builtin_expect(!!(x), 0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRY_LOAD_HOOK_FUNC(name) <span class="meta-keyword">if</span> (unlikely(!g_sys_##name)) &#123;g_sys_##name = (sys_##name##_t)dlsym(RTLD_NEXT,#name);&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span>* (*<span class="keyword">sys_malloc_t</span>)(<span class="keyword">size_t</span> size);</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">sys_malloc_t</span> g_sys_malloc = <span class="literal">NULL</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">malloc</span><span class="params">(<span class="keyword">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TRY_LOAD_HOOK_FUNC(<span class="built_in">malloc</span>);</span><br><span class="line">    <span class="keyword">void</span> *p = g_sys_malloc(size);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"in malloc hook function ...\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*<span class="keyword">sys_free_t</span>)</span><span class="params">(<span class="keyword">void</span> *ptr)</span></span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">sys_free_t</span> g_sys_free = <span class="literal">NULL</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">free</span><span class="params">(<span class="keyword">void</span> *ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TRY_LOAD_HOOK_FUNC(<span class="built_in">free</span>);</span><br><span class="line">    g_sys_free(ptr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"in free hook function ...\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中使用 <code>RTLD_NEXT</code> 来获取系统glibc的 <code>malloc</code> 函数地址，由于待会使用 <code>LD_PRELOAD</code> 来优先加载我们创建的 <code>so</code> 文件，因而系统的 <code>libc.so.6</code> 排在第二位，也就是 <code>next</code> 。</p><p>编译该文件生成一个 <code>so</code> 库：<br><code>gcc -fPIC -shared -o libmyhook.so my_hook.c -ldl</code></p><h5><span id="测试程序">测试程序</span></h5><p>接下来创建测试程序：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"enter main...\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> *p = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span> (!p) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"allocation error...\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"returning to main...\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(<span class="string">"aa"</span>, <span class="string">"bb"</span>) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"hook strcmp\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"not match\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4><span id="hack测试">hack测试</span></h4><p>对上面的测试程序，直接编译并运行<br><code>gcc -o main main.c</code><br><code>./main</code></p><p>结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">enter main...</span><br><span class="line">returning to main...</span><br><span class="line">not match</span><br></pre></td></tr></table></figure><p>可以清楚的看到，我们创建的 <code>so</code> 中函数并没有被调用到，也就是说<strong>hack失败</strong>！</p><p>等等！目前为止我们生成的 <code>so</code> 文件，并没有与测试程序产生关联，所以 <code>malloc</code>、<code>free</code> 函数没有被hack掉，理所应当。</p><p><strong>那么，如何才能让两者产生关联呢？</strong></p><p><strong>LD_PRELOAD</strong>这个环境变量，能够影响程序运行时候动态链接库的加载，可以通过设置其来优先加载某些库，进而覆盖掉某些函数。</p><p>这里只需要<strong>稍加更改运行方式</strong>：<br><code>LD_PRELOAD=./libmyhook.so ./main</code></p><p>结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">enter main...</span><br><span class="line">in malloc hook function ...</span><br><span class="line">returning to main...</span><br><span class="line">in free hook function ...</span><br><span class="line">not match</span><br></pre></td></tr></table></figure><p>大功告成，我们自定义的 <code>malloc</code>、<code>free</code> 被调用到，<strong>hack成功</strong>！</p><h4><span id="问题">问题</span></h4><p>在尝试对<code>strcmp</code> 函数进行hack时，按照如上方式并不能hack成功，通过查阅资料，原来编译器对很多函数进行了内联优化，并不会调用到 <code>so</code> 库中的函数，因而通过优先加载自定义动态库的方式不可行。<br>不过，可以在编译测试程序时，添加 <code>-fno-builtin-strcmp</code>，关闭 <code>strcmp</code> 函数的优化<br><code>gcc -o main main.c -fno-builtin-strcmp</code></p><p>以相同的方式运行测试程序：<br><code>LD_PRELOAD=./libmyhook.so ./main</code></p><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">enter main...</span><br><span class="line">in malloc hook function ...</span><br><span class="line">returning to main...</span><br><span class="line">in free hook function ...</span><br><span class="line">in strcmp hook function ...</span><br><span class="line">hook strcmp</span><br></pre></td></tr></table></figure><h4><span id="参考资料">参考资料</span></h4><ul><li><a href="https://blog.csdn.net/haoel/article/details/1602108" target="_blank" rel="noopener">警惕UNIX下的LD_PRELOAD环境变量</a></li><li><a href="https://stackoverflow.com/questions/44606523/hook-strcmp-using-ld-preload-in-linux" target="_blank" rel="noopener">如何hack strcmp</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在研究C++中协程机制时，发现有些实现通过hack掉glibc的read、write等IO操作函数，以达到迁移协程框架时，最小化代码改动，遂小小研究一下linux下的hook机制。&lt;/p&gt;
    
    </summary>
    
      <category term="编程实践" scheme="http://www.xiaocc.xyz/categories/%E7%BC%96%E7%A8%8B%E5%AE%9E%E8%B7%B5/"/>
    
    
  </entry>
  
  <entry>
    <title>数据分页拉取机制探讨</title>
    <link href="http://www.xiaocc.xyz/2018-08-20/%E6%95%B0%E6%8D%AE%E5%88%86%E9%A1%B5%E6%8B%89%E5%8F%96%E6%9C%BA%E5%88%B6%E6%8E%A2%E8%AE%A8/"/>
    <id>http://www.xiaocc.xyz/2018-08-20/数据分页拉取机制探讨/</id>
    <published>2018-08-20T15:30:00.000Z</published>
    <updated>2018-12-15T11:17:50.128Z</updated>
    
    <content type="html"><![CDATA[<p>评论系统及各种时间线feeds系统，数据分页拉取机制讨论。</p><a id="more"></a><h4><span id="业务形态">业务形态</span></h4><p>分页拉取机制使用场景较多，在各种产品的评论模块、基于时间线feeds的产品中，均能见到其身影。<br>由于该机制使用的普遍性，本文分析常见实现中的问题，并探讨优化方案。</p><p>本文主要基于 <a href="https://developer.twitter.com/en/docs/tweets/timelines/guides/working-with-timelines" target="_blank" rel="noopener">拉取twitter时间线</a> 整理而来，可以认为是一篇阅读心得。</p><h4><span id="常见实现">常见实现</span></h4><p>一般是凭直觉设计API，请求参数包含 <code>page + count</code>，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//请求第一页</span><br><span class="line">page = 0;</span><br><span class="line">count = 5;</span><br><span class="line"></span><br><span class="line">//请求第二页</span><br><span class="line">page = 1;</span><br><span class="line">count = 5;</span><br></pre></td></tr></table></figure><p>服务端根据 <code>page</code>、<code>count</code> 检索数据并返回，流程如图：<br><img src="https://blog-1256756464.cos.ap-shanghai.myqcloud.com/image/20180820203459.png" alt=""><br>(图片借用自 twitter 博客图片，原图底部就缺失……)</p><h5><span id="问题">问题</span></h5><p>假如世界静止，一切不变的情况下，该机制运行良好。</p><p>如果，在第一次拉取后，时间线新插入2条数据，这时拉取第二页会发生什么情况。<br>如图：<br><img src="https://blog-1256756464.cos.ap-shanghai.myqcloud.com/image/20180820204642.png" alt=""></p><p>服务端根据 <code>page = 1，count = 5</code>，从top往下找，到第5条（id 为 <code>Tweet 7</code>），获取count条数据，然后返回给前端。</p><p>可以明显发现问题：返回给前端的数据存在重复，id为<code>Tweet 7、Tweet 6</code>的两条数据，在client第一次拉取时，已经返回过该数据。<br>并且，在client两次拉取间隔内，新插入时间线的数据条数越多，发生重复返回的数据条数越多。</p><h5><span id="如何解决该问题">如何解决该问题</span></h5><p>思考一下，上面提到的拉取机制为什么会存在重复问题？</p><p>由于两次拉取均以实时<code>top</code> 作为基准线，而这个基准线会因为数据新增而浮动，所以后续拉取会出现数据重复问题。</p><p>我们能不能在第一次拉取后，返回一个 <code>cursor</code> 作为下次拉取的top，并以该top来获取数据？</p><h4><span id="max_id机制">max_id机制</span></h4><p>经过上面的思考，我们对server端返回的数据结构做改造，新增 <code>max_id</code>参数作为下次拉取的top。<br>如图：<br><img src="https://blog-1256756464.cos.ap-shanghai.myqcloud.com/image/20180820210640.png" alt=""></p><p>client第一次拉取：不用传递 <code>max_id</code> 参数，server端返回数据的同时返回 <code>max_id</code> 参数。</p><p>client第二次拉取：以 <code>max_id + count</code> 作为参数，server端返回 <code>max_id</code> 之后的 <code>count</code> 条数据。</p><p>注意：该处有一个小优化，如果 <code>max_id</code> 是数字型，而不是字符串型，server端可以使用 <code>max_id - 1</code> 来过滤数据。<br><img src="https://blog-1256756464.cos.ap-shanghai.myqcloud.com/image/20180820211305.png" alt=""></p><p>至此，采用该机制，我们能很好的拉取<strong>存量数据</strong>。</p><h4><span id="since_id机制">since_id机制</span></h4><p>如上图，经过2次拉取后，id为 <code>Tweet 10</code> 到 <code>Tweet 1</code> 的数据均已返回给前端，用户如何获取新增的数据呢？</p><p>直接开始一个新的拉取周期，传递 <code>count = 5</code> 会有什么问题？</p><p>首次拉取会返回 <code>Tweet 12</code> 到 <code>Tweet 8</code> 的数据，其中有三条数据是已经处理过的！</p><p><strong>糟糕！除了让client端做id级别的去重，有别的处理办法吗？</strong></p><p>其实，我们可以记录上一个拉取周期的top，这样开始下一个周期的时候，只需要拉取当前top到上个周期top之间的数据，也即新增数据。</p><p>如图：<br><img src="https://blog-1256756464.cos.ap-shanghai.myqcloud.com/image/20180820212548.png" alt=""></p><p>第二个拉取周期的第一次拉取，传递 <code>count</code>的同时，传递 <code>since_id</code> 参数，server端返回 <code>Tweet 18</code> 到 <code>Tweet 14</code> 的数据。</p><p>在第二次拉取的时候，server端根据 <code>max_id</code>、<code>since_id</code> 只会返回 <code>3</code> 条新增数据，而不会返回已经处理过的 <code>Tweet 10</code>、<code>Tweet 9</code>这两条数据。</p><h4><span id="结语">结语</span></h4><p>经过以上讨论，该优化机制可以很好的解决基于时间线的分页数据拉取问题。</p><p>但是，对于乱序数据，例如：评论根据点赞数而非时间排序，在用户两次分页拉取之间，由于其他用户的点赞操作，列表数据会上下波动、甚至发生剧烈变化，该 <code>max_id + since_id</code> 的机制并不能工作。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;评论系统及各种时间线feeds系统，数据分页拉取机制讨论。&lt;/p&gt;
    
    </summary>
    
      <category term="系统设计" scheme="http://www.xiaocc.xyz/categories/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
    
    
  </entry>
  
  <entry>
    <title>频控设计与思考</title>
    <link href="http://www.xiaocc.xyz/2018-08-19/%E9%A2%91%E6%8E%A7%E8%AE%BE%E8%AE%A1%E4%B8%8E%E6%80%9D%E8%80%83/"/>
    <id>http://www.xiaocc.xyz/2018-08-19/频控设计与思考/</id>
    <published>2018-08-19T15:00:00.000Z</published>
    <updated>2018-09-18T03:43:29.275Z</updated>
    
    <content type="html"><![CDATA[<p>频控系统是后台服务自我保护的很重要的一个子系统，本文讨论几种常见的设计思路、并探讨使用redis进行频控设计中的相关问题</p><a id="more"></a><h4><span id="基本概念">基本概念</span></h4><h5><span id="什么是频控">什么是频控？</span></h5><p>从字面意义理解，<code>频控</code>就是频率控制，多用来对服务及接口进行保护，避免突发大流量请求冲击系统，进而引起系统雪崩，无法对外继续提供服务。<br>另外，也有一些业务层面利用该手段进行自我保护，例如：防刷系统，通过限制用户访问某种资源的频率来阻挡恶意请求。</p><h4><span id="如何进行频控">如何进行频控？</span></h4><p>频控级别主要分为两块：</p><ul><li>系统级频控</li><li>个人级频控</li></ul><p>以下将分别介绍实现方式与相关问题</p><h5><span id="系统级频控"><code>系统级频控</code></span></h5><p>该级别频控有多种实现如下：</p><ul><li>基于内存计数</li><li>基于内存的double-buffer计数</li><li>令牌桶</li></ul><p>1.基于内存计数的实现比较简单，伪代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">uint32_t qps = 0;</span><br><span class="line">time_t monitor_start_time = 0;    //qps记录开始时间</span><br><span class="line"></span><br><span class="line">uint32_t add_qps()</span><br><span class="line">&#123;</span><br><span class="line">    time_t cur_time = ::time(NULL);</span><br><span class="line">    if (cur_time != monitor_start_time)</span><br><span class="line">    &#123;</span><br><span class="line">        //开始新1s的记录</span><br><span class="line">        qps = 1;</span><br><span class="line">        monitor_start_time = cur_time;</span><br><span class="line">        </span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        return __sync_add_and_fecth(&amp;qps, 1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心：判断该次请求是累加到记录周期，还是重新开始一次记录周期。</p><p>2.基于内存的double-buffer的实现，主要是优化<code>实现1</code>中的时间判断逻辑。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">uint32_t qps[2] = &#123;0, 0&#125;;</span><br><span class="line"></span><br><span class="line">uint32_t add_qps()</span><br><span class="line">&#123;</span><br><span class="line">    time_t cur_time = ::time(NULL);</span><br><span class="line">    </span><br><span class="line">    qps[(time + 1) % 2] = 0;</span><br><span class="line">    </span><br><span class="line">    return __sync_add_and_fecth(&amp;qps[time % 2], 1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该实现利用<code>uint32_t qps[2]</code>的数组，分别记录当前秒的qps、下一秒的qps，对于每一次<code>add_qps</code>请求，将下一秒记录qps数据的槽位<code>清0</code>，累加当前秒的qps并返回结果。</p><p>3.基于令牌桶的实现，该实现以一定速度将令牌放入桶中，待请求到来，检查当前秒的已放行请求数量是否小于桶中令牌数量，否则，不予通过。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">const uint32_t qps_limit = 9527;</span><br><span class="line">uint64_t start_time_ms = 0;</span><br><span class="line">uint32_t cur_pass_count = 0;</span><br><span class="line"></span><br><span class="line">bool check_pass_qps()</span><br><span class="line">&#123;</span><br><span class="line">    uint64_t cur_time_ms = getTimeMS();</span><br><span class="line">    </span><br><span class="line">    if (!check_in_same_second(cur_time_ms, start_time_ms))</span><br><span class="line">    &#123;</span><br><span class="line">        //清空数据，开始新的周期</span><br><span class="line">        start_time_ms = getStartMS(cur_time_ms);</span><br><span class="line">        cur_pass_count = 1;</span><br><span class="line">        </span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //计算桶中令牌数量</span><br><span class="line">    uint32_t can_pass_count = time_sub(cur_time_ms, start_time_ms) * qps_limit / 1000.0;</span><br><span class="line">    </span><br><span class="line">    //不予通过</span><br><span class="line">    if (cur_pass_count &gt;= can_pass_count)</span><br><span class="line">    &#123;</span><br><span class="line">        retun false;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ++cur_pass_count;</span><br><span class="line">    retun true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该伪代码中设置控制粒度为ms，也就是 qps_limit / 1000.0的由来。</p><h5><span id="用户级频控"><code>用户级频控</code></span></h5><p>主要有基于内存的设计，包括KV存储、Key过期淘汰策略等，这些基本需求与当今热门的NoSql系统<code>redis</code>的功能一样，因而可以用其来进行频控。</p><h4><span id="redis频控">redis频控</span></h4><p>官方有一个针对ip进行频控的例子：<a href="https://redis.io/commands/incr" target="_blank" rel="noopener">地址</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">FUNCTION LIMIT_API_CALL(ip)</span><br><span class="line">ts = CURRENT_UNIX_TIME()</span><br><span class="line">keyname = ip + &quot;:&quot; + ts</span><br><span class="line">current = GET(keyname)</span><br><span class="line">IF current != NULL AND current &gt; 10 THEN</span><br><span class="line">    ERROR &quot;too many requests per second&quot;</span><br><span class="line">ELSE</span><br><span class="line">    MULTI</span><br><span class="line">        INCR(keyname,1)</span><br><span class="line">        EXPIRE(keyname,10)</span><br><span class="line">    EXEC</span><br><span class="line">    PERFORM_API_CALL()</span><br><span class="line">END</span><br></pre></td></tr></table></figure><p>其中key的设计有两种方案：ip + ts、ip</p><p>对第一种key的方案<code>ip + ts</code>样例中采用 <code>MULTI + EXEC</code>对命令进行包裹，以解决单独调用<code>INCR</code>后<code>EXPIRE</code>崩溃的问题。可以思考一下，在当前这种key的设计方式下，由于key是<code>ip + ts</code>，就算由于小概率崩溃，导致<code>EXPIRE</code>未执行，对系统无根本性影响，不影响该ip下一秒的调用及频控。</p><p>而第二种key的方案<code>ip</code>，如果不采用<code>MULTI + EXEC</code>对命令进行包裹，如果<code>EXPIRE</code>未执行，完蛋，由于是ip维度进行计数，如果该ip超频，由于没有时机去清理该key，导致该ip超频后一直处于超频状态，永远无法请求相关服务。</p><p>同时官方样例中也说明，可以采用<code>lua脚本</code>的形式来执行命令，因为server端崩溃的概率极低，基本不可能出现该特殊情况。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">local current</span><br><span class="line">current = redis.call(&quot;incr&quot;,KEYS[1])</span><br><span class="line">if tonumber(current) == 1 then</span><br><span class="line">    redis.call(&quot;expire&quot;,KEYS[1],1)</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h4><span id="结语">结语</span></h4><p>在之前的paypal支付系统中，由于兑换码是无记名设计，出于安全角度考虑，对ip的请求进行频控，以打击遍历兑换码空间进而恶意兑换的情况。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;频控系统是后台服务自我保护的很重要的一个子系统，本文讨论几种常见的设计思路、并探讨使用redis进行频控设计中的相关问题&lt;/p&gt;
    
    </summary>
    
      <category term="系统设计" scheme="http://www.xiaocc.xyz/categories/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
    
    
  </entry>
  
  <entry>
    <title>一点感悟</title>
    <link href="http://www.xiaocc.xyz/2018-08-06/%E4%B8%80%E7%82%B9%E6%84%9F%E6%82%9F/"/>
    <id>http://www.xiaocc.xyz/2018-08-06/一点感悟/</id>
    <published>2018-08-06T15:30:00.000Z</published>
    <updated>2018-09-18T03:46:59.282Z</updated>
    
    <content type="html"><![CDATA[<p>最近换了工作，博客也停更好久，有点懈怠，需要坚持。</p><a id="more"></a><h4><span id="一点唠叨">一点唠叨</span></h4><p>由于各种原因，再次折腾了一把，从上家公司离职，换了如今这家公司。</p><p>技术栈和业务都变了，才发觉IT技术的变化真是日新月异，你稍微不进步，很快就被落下。</p><p>新公司的工作语言是Java，这门语言当初一直没有下决心好好学习、深入了解，对之抱有技术的偏见和固执，一直守着C++不放，如今业内已很少有公司依然在使用它。</p><p>要么是Java，要么使用go，C++虽说运行效率高，但是对开发人员要求极高，加之目前硬件性能突飞猛进，对程序性能要求没那么高，只要是堆机器能解决的问题，就不是问题。</p><p>反而业务开发效率、迭代速度、版本发布流程、服务扩容流程、监控等等更为重要。</p><p>使用C++需要很多轮子的配合，网络库、服务发现机制、负载均衡和容灾、监控、配置系统等等，面对于目前火热的大数据相关领域，如HBase、HDFS、Hive等等，也是有心无力，还是使用Java开发业务更为方便。</p><p>Java语法不算复杂，可是由于反射机制导致的相关生态很多，例如dubbo，spring，mybatic等等，这些甚至于比语言本身还要复杂，如果这些组件不了解，开发现代Java项目会很棘手。</p><h4><span id="写作计划">写作计划</span></h4><p>前几天看博客，对一句话感触很深：</p><blockquote><p><strong>看书如果不思考，那不是在看书，是在背书！</strong></p></blockquote><p>接下来的时间，我将以一个初学者的心态、一切归零，深入学习Java语言，包括基本语法、相关生态等。</p><p>即将写的博客主题内容：</p><ul><li>使用redis进行ip频控</li><li>评论分页拉取设计</li><li>linux hook机制</li><li>future与promise编程模型</li><li>单点登录SSO设计</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近换了工作，博客也停更好久，有点懈怠，需要坚持。&lt;/p&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://www.xiaocc.xyz/categories/%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>定时器的设计</title>
    <link href="http://www.xiaocc.xyz/2018-06-23/%E5%AE%9A%E6%97%B6%E5%99%A8%E7%9A%84%E8%AE%BE%E8%AE%A1/"/>
    <id>http://www.xiaocc.xyz/2018-06-23/定时器的设计/</id>
    <published>2018-06-23T05:30:00.000Z</published>
    <updated>2018-12-15T11:16:26.705Z</updated>
    
    <content type="html"><![CDATA[<p>前一段时间学习raft论文，自己造了个服务框架的轮子，网络通信采用ZMQ，还需要设计定时器，以实现周期性功能，如心跳发布。</p><a id="more"></a><p>定时器的设计有多种方案，常见的实现有以下两种：</p><h4><span id="周期遍历">周期遍历</span></h4><p>该方案通过在event loop中周期性检查是否到达timer的触发时间，如果到达，则调用timer的处理函数。<br>而timer的管理可以通过堆、map、时间轮等多种形式，按照timer的触发时间排序。<br>这样当找到第一个触发时间比当前时间大的timer，那么其之后的timer都不需要检查是否应该触发，该轮触发检查可以直接结束。</p><p>伪代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Event::run()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/*注意：该处等待时间不能填-1，否则下面定时器无法周期性触发*/</span></span><br><span class="line">        epoll_wait(....);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*处理网络事件*/</span></span><br><span class="line">        <span class="keyword">do</span> something ...</span><br><span class="line">        </span><br><span class="line">        now = get_now_time();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*all_timer管理所有需要触发的timer，按照触发时间，从小至大排序*/</span></span><br><span class="line">        <span class="keyword">for</span> item in all_timer:</span><br><span class="line">            <span class="keyword">if</span> item.expire_time &lt;= now:</span><br><span class="line">                <span class="comment">/*调用timer的处理函数*/</span></span><br><span class="line">                item.call_back()</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="comment">/*由于定时器按照触发时间排序，该item之后的timer均未到触发时间*/</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方案设计简单、容易实现，但是与事件驱动框架不协调，显得比较怪异。</p><h4><span id="timer_fd">timer_fd</span></h4><p>该方案通过linux的timer_fd机制，将定时器统一通过事件框架触发。<br>通过timerfd_create能够创建一个定时器fd，再通过timerfd_settime设置超时时间，当超时时间到达，该fd上即可收到read事件，然后再查找all_timer中需要触发的timer。</p><p>伪代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Event:init()</span><br><span class="line">&#123;</span><br><span class="line">    tfd_ = timerfd_create(...);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*将定时器fd加入事件框架，统一处理*/</span></span><br><span class="line">    add_event(tfd_, EV_READ, timer_call_back);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Event::run()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/*注意，该处等待超时时间可以填入-1，定时器不再单独处理*/</span></span><br><span class="line">    epoll_wait(....);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*处理事件*/</span></span><br><span class="line">    <span class="keyword">do</span> something ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Event::timer_call_back()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/*read事件*/</span></span><br><span class="line">    read(tfd_, ...)</span><br><span class="line">    </span><br><span class="line">    now = get_now_time();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*处理需要触发的timer*/</span></span><br><span class="line">    <span class="keyword">do</span> something</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*调整tfd_下次超时时间*/</span></span><br><span class="line">    timerfd_settime(...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与方案一的区别：</p><ul><li>整体通过事件触发，模型统一</li><li>方案一中，需要定时检查是否可以触发timer，就算任何一个timer的触发时间未到，该检查步骤无法避免</li><li>方案二中，一部分timer触发后，可以直接获取下一个待触发的timer的触发时间，从而设置tfd_的超时，在超时时间到达之前，tfd_不会被事件框架触发</li></ul><p><img src="https://blog-1256756464.cos.ap-shanghai.myqcloud.com/image/Jietu20180623-142645.jpg" alt=""><br>如图所示：<br>方框中数字为timer需要触发的时刻，假设当前时刻为 <code>3</code> ，那么前4个timer需要触发，下一个待触发的timer的时刻为 <code>8</code>，所以我们可以调整tfd_相对超时时间为 <code>5</code>，在那之前tfd_上都不会有read事件，当然也不会触发事件框架。</p><h4><span id="几个关键问题">几个关键问题</span></h4><h5><span id="定时器模式">定时器模式</span></h5><p>定时器有两种常用模式</p><ul><li>一次性定时器，设置在某个时间点触发一次，可以称为 <code>run_after</code></li><li>周期性定时器，需要周期性触发，可以称为 <code>run_every</code></li></ul><p>我们看看这两种定时器如何实现<br>两者其实有相似之处，所谓的周期性定时器，只不过是该次timer触发以后，需要再次添加一个timer到管理器中以待下次触发。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Event::timer_call_back()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/*read事件*/</span></span><br><span class="line">    read(tfd_, ...)</span><br><span class="line">    </span><br><span class="line">    now = get_now_time();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*从all_timer中取出所有需要触发的timer，注意：将这些timer从all_timer中删除*/</span></span><br><span class="line">    expired_timers = get_all_expired_timers(now);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> item in expired_timers:</span><br><span class="line">        <span class="comment">/*调用timer处理函数*/</span></span><br><span class="line">        item.call_back()</span><br><span class="line">        </span><br><span class="line">    <span class="comment">/*添加周期性定时器，以待下次触发*/</span></span><br><span class="line">    <span class="keyword">for</span> item in expired_timers:</span><br><span class="line">        <span class="keyword">if</span> item.repeated:</span><br><span class="line">            add_timer(next_expire_time, ....)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*调整tfd_下次超时时间*/</span></span><br><span class="line">    next_expire_time = get_next_expire_time();</span><br><span class="line">    </span><br><span class="line">    timerfd_settime(...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5><span id="在timer处理函数中再次添加timer">在timer处理函数中再次添加timer</span></h5><p>以上讨论均没有考虑一个问题，如果在timer的响应函数中添加一个timer，会发生什么？</p><p>先看看方案一：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> item in all_timer:</span><br><span class="line">    <span class="keyword">if</span> item.expire_time &lt;= now:</span><br><span class="line">        <span class="comment">/*调用timer的处理函数*/</span></span><br><span class="line">        item.call_back()</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment">/*由于定时器按照触发时间排序，该item之后的timer均未到时间*/</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>由于timer的添加是在遍历 <code>all_timer</code> 的过程中，如果直接添加到 <code>all_timer</code> 中会引起该存储结构改变，引起迭代器失效，进而导致进程挂掉。</p><p>所以，可以在遍历开始之前，设置标记位 <code>run_in_timer_loop</code>，同时在 <code>add_timer</code> 中特殊处理，如果当前设置了该标记位，那么将需要添加的timer暂存到一个临时存储，待循环遍历完毕之后，统一进行添加处理。</p><p>再看看方案二：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*从all_timer中取出所有需要触发的timer，注意：将这些timer从all_timer中删除*/</span></span><br><span class="line">expired_timers = get_all_expired_timers(now);</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> item in expired_timers:</span><br><span class="line">    <span class="comment">/*调用timer处理函数*/</span></span><br><span class="line">    item.call_back()</span><br></pre></td></tr></table></figure><p>可以看到，对于需要触发的timer，并不是直接在 <code>all_timer</code> 中进行遍历检查触发，而是将其已经从 <code>all_timer</code> 中剥离，因而在 <code>item.call_back()</code> 中调用 <code>add_timer</code> ，可以将timer直接添加到 <code>all_timer</code>，而不需要进行额外特殊处理。</p><p>参考资料：</p><ul><li>muduo定时器的设计 <a href="https://github.com/chenshuo/muduo" target="_blank" rel="noopener">https://github.com/chenshuo/muduo</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前一段时间学习raft论文，自己造了个服务框架的轮子，网络通信采用ZMQ，还需要设计定时器，以实现周期性功能，如心跳发布。&lt;/p&gt;
    
    </summary>
    
      <category term="系统设计" scheme="http://www.xiaocc.xyz/categories/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
    
    
  </entry>
  
  <entry>
    <title>2018年端午小记</title>
    <link href="http://www.xiaocc.xyz/2018-06-19/2018%E5%B9%B4%E7%AB%AF%E5%8D%88%E8%8A%82/"/>
    <id>http://www.xiaocc.xyz/2018-06-19/2018年端午节/</id>
    <published>2018-06-19T14:30:00.000Z</published>
    <updated>2018-09-18T03:44:18.452Z</updated>
    
    <content type="html"><![CDATA[<p>2018年端午与亲戚团聚过节，特此小记。</p><a id="more"></a><p>由于老婆回岳阳老家，我一个人在深圳，没什么安排，广州有几个亲戚，约了多次，终于决定去见见他们，一起过节。</p><h4><span id="通行方案">通行方案</span></h4><p>网上查好地点，广州黄埔，属于广州的郊区。</p><ul><li>如果坐火车，则需要从广州市区坐一个多小时地铁才能到达黄埔区，火车等待及运行时间约2小时。</li><li>如果坐大巴，直接到达，总耗时约1.5小时，简单直接。</li></ul><p>可见，有些时候高大上的东西，不一定划算，原始的东西，可能有意想不到的效果。<br>做软件系统设计也是如此，不要追求系统华丽而导致过度设计，<code>KISS</code> 原则效果更好，一方面利于设计开发，另一方面利于系统维护。</p><h4><span id="出发">出发</span></h4><p>八点起床，街边小店吃完早餐，由于地图显示汽车客运站不远，决定走路过去。<br>走啊走，走啊走。。。<br>终于走到，耗时20min。<br>购票，师傅，麻烦买一张到广州黄埔的车票，不好意思，这里没有到黄埔的汽车，你得到总站坐车。<br>完蛋，功课信息有误。<br><strong>怎么办？</strong><br>迅速调整思路，旁边有摩的，直接谈价格，走人。<br>软件设计与运行中，会出现各种各样的问题。如果在问题出现之前，就能考虑到该问题与解决方案，这叫做 <code>fault tolerance</code>。其它突发问题，就得转变思路，先解决问题，再排查原因，优先恢复服务。面对于线上突发问题，例如服务core掉，如果问题根源不能在短时间内分析解决，可以考虑其它方案，例如调整配置文件、将该机器从集群中踢掉等等方式，第一时间恢复服务。我碰到过一些同事，面对于该事件，思路一直陷在排查问题原因，而没有想到及时恢复服务。</p><h4><span id="表弟一家">表弟一家</span></h4><p>表弟比我小4岁，却先当了爸爸，他到车站接我，晒黑得跟碳似的，这是生活留下的印记。<br>小侄女长得很可爱，一岁多点，爱动，好奇心强，不怕生人，我刚到，她就把玩具全部搬出来，让我陪她玩，我也算是提前上课了，哈哈。<br>吃完中饭，她就开始睡午觉，我们几个人则谈论着今年的境遇。<br>小侄女睡醒后，带着她出去遛弯，刚好旁边有划龙舟训练的，她高兴地不得了，踉踉跄跄的往前跑。<br>走路看似不稳、要摔倒，其实不然，经我观察，她有很强的自我调节能力，会调整重心把自己稳住。高一点的台阶，则是手脚并用着爬上去，地上的小蜗牛，也够她看好久的。</p><p>是什么让我们不愿停下匆匆的脚步，对生活不再好奇，背负着一身皮囊，上班、下班，无止境。<br>生活的乐趣，本来的意义，又在哪里？<br>人生短短几十年。<br>又让我想起了那句台词：<code>成年人的生活里，没有容易二字</code>。</p><p><strong>愿小侄女健康成长，欢声笑语伴其一生！</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2018年端午与亲戚团聚过节，特此小记。&lt;/p&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://www.xiaocc.xyz/categories/%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>CPU Cache与一致性</title>
    <link href="http://www.xiaocc.xyz/2018-06-10/cpu%E7%9A%84cache%E4%B8%8E%E4%B8%80%E8%87%B4%E6%80%A7/"/>
    <id>http://www.xiaocc.xyz/2018-06-10/cpu的cache与一致性/</id>
    <published>2018-06-10T02:00:00.000Z</published>
    <updated>2018-12-15T11:13:29.261Z</updated>
    
    <content type="html"><![CDATA[<p>现代计算机多核CPU的多级缓存构成与一致性算法</p><a id="more"></a><p>最近看了CPU Cache相关的资料，涉及Cache的构成及一致性解决办法，现总结并记录</p><h4><span id="存储层次构成">存储层次构成</span></h4><p>由于CPU运行速度非常快，而主内存相对来说很慢，因此CPU并不直接访问主内存，两者之间有多次缓存结构。</p><p>存储层次，如下图：</p><p><img src="https://blog-1256756464.cos.ap-shanghai.myqcloud.com/image/Jietu20180610-101826.jpg" alt=""></p><p><em>图片来源：<a href="https://mp.weixin.qq.com/s/y1NSE5xdh8Nt5hlmK0E8Og" target="_blank" rel="noopener">内核月谈——CPU Cache Line伪共享问题的总结和分析</a></em></p><p>从上图可以看出，register与主memory访问速度相差约<strong>40倍</strong>，而磁盘访问一次耗时大约5ms，主memory与其访问速度相差约<strong>100倍</strong>。</p><h4><span id="cpu的cache架构">CPU的Cache架构</span></h4><p><img src="https://blog-1256756464.cos.ap-shanghai.myqcloud.com/image/Jietu20180610-103044.jpg" alt=""></p><p><em>图片来源：<a href="https://mp.weixin.qq.com/s/y1NSE5xdh8Nt5hlmK0E8Og" target="_blank" rel="noopener">内核月谈——CPU Cache Line伪共享问题的总结和分析</a></em></p><p>如上图所示：<br>一个物理CPU有四个物理core，每个物理core有两个HT(Hyper Thread)<br>每个物理core内的所有HT，共享：L1-指令cache、L1-数据cache、L2-cache<br>所有物理core共享L3-cache</p><h4><span id="cache的一致性问题">Cache的一致性问题</span></h4><p>通过了解CPU的Cache架构可以发现，每个物理CPU都有自己的Cache，如何解决Cache的不一致问题。</p><h5><span id="不一致问题的产生">不一致问题的产生</span></h5><p>假设多核CPU在每个CPU内不单独设置Cache，而是所有物理CPU共享一个Cache，这样全部CPU的读写操作均串行通过同一个Cache。</p><p><img src="https://blog-1256756464.cos.ap-shanghai.myqcloud.com/image/Jietu20180610-104418.jpg" alt=""></p><p>这样，当其中一个CPU进行写操作，而另一个CPU进行读操作，总是能读到正确的值。<br>但是，所有CPU共享同一个Cache的设计，会极大的降低系统的运算速度，因为所有CPU均需要串行的访问Cache以获取数据，大部分时间均在等待Cache使用权。</p><p>如果引入多个Cache，就会涉及到Cache的一致性问题。<br>所以，Cache的一致性问题，不是因为多CPU导致，而是多Cache导致。</p><h5><span id="一致性协议">一致性协议</span></h5><p>参考WIKI关于Cache一致性的解释：<a href="https://en.wikipedia.org/wiki/Cache_coherence" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Cache_coherence</a><br>常用的一致性协议有 <code>snooping</code> 协议，也称为窥探协议。</p><p>该协议对总线上的操作进行监听，例如：一个CPU_A，对变量X进行了写操作，但是还未回写到memory，而另外一个CPU_B需要读取变量X，这时如果直接从memory获取变量X的值，是过期值，<br>这时CPU_A能够从总线上窥探到该次读操作，其把X值写入memory，而CPU_B的读操作由于未得到响应，其会重新发起读请求，这时就能从memory读取到最新值。</p><p>以上只是简单讲解，具体有 <code>MESI</code> 协议，其把Cache分为几个状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">I: Invalid（无效），该CPU中该Cache字段失效</span><br><span class="line">S: Shared（共享），多个CPU的Cache均共享该数据</span><br><span class="line">E: Exclusive（独占），数据只在该CPU独有，其它CPU变为Invalid状态</span><br><span class="line">M: Modified（已修改），与E状态类似，但是数据已经被修改，在其变为Invalid状态时，需要先将数据回写到内存</span><br></pre></td></tr></table></figure><p>状态机如图：<br><img src="https://blog-1256756464.cos.ap-shanghai.myqcloud.com/image/Jietu20180610-110431.jpg" alt=""></p><p><em>图片来源：<a href="http://www.pandan.xyz/2016/09/23/mesi%20%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AE/" target="_blank" rel="noopener">MESI 缓存一致性协议</a></em></p><p>参考文章：</p><ul><li><a href="https://mp.weixin.qq.com/s/y1NSE5xdh8Nt5hlmK0E8Og" target="_blank" rel="noopener">CPU Cache Line伪共享问题的总结和分析</a></li><li><a href="http://www.pandan.xyz/2016/09/23/mesi%20%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AE/" target="_blank" rel="noopener">MESI 缓存一致性协议</a> </li><li><a href="http://www.infoq.com/cn/articles/cache-coherency-primer/" target="_blank" rel="noopener">缓存一致性（Cache Coherency）入门</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现代计算机多核CPU的多级缓存构成与一致性算法&lt;/p&gt;
    
    </summary>
    
      <category term="编程理论" scheme="http://www.xiaocc.xyz/categories/%E7%BC%96%E7%A8%8B%E7%90%86%E8%AE%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>服务框架设计</title>
    <link href="http://www.xiaocc.xyz/2018-06-03/%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E8%AE%BE%E8%AE%A1/"/>
    <id>http://www.xiaocc.xyz/2018-06-03/服务框架设计/</id>
    <published>2018-06-03T09:30:00.000Z</published>
    <updated>2018-12-15T11:17:07.219Z</updated>
    
    <content type="html"><![CDATA[<p>最近在研究raft论文，想动手实现一下，但是手上没有合适的网络框架，花了几天造了个轮子。</p><a id="more"></a><h4><span id="起因">起因</span></h4><p>raft论文去年看过一遍，最近重读，发现上次阅读的东西，一点都不记得。。。<br>决定这次跟着论文简单的实现一遍，加深理解，手上没有合适的网络框架，学go呢，又来不及，花了几天造了个轮子，总算是跑起来了。</p><p><strong>设计思想参考公司内部网络框架，将其部分精简</strong></p><h4><span id="框架设计">框架设计</span></h4><p>底层网络框架依托ZMQ，采用事件驱动形式，client与server端交互图如下：<br><img src="https://blog-1256756464.cos.ap-shanghai.myqcloud.com/image/Jietu20180603-174640.jpg" alt=""></p><h4><span id="worker_dispatcher">worker_dispatcher</span></h4><p><img src="https://blog-1256756464.cos.ap-shanghai.myqcloud.com/image/Jietu20180603-175915.jpg" alt=""><br>以ZMQ_ROUTER的形式对接监听tcp端口，将client请求通过内部inproc的socket负载均衡的转发给worker进行处理<br>数据转发给worker时，将ZMQ_ROUTER的identity帧一并发送，这样待worker处理完毕，通过inproc的socket返回数据时，ZMQ_ROUTER能将数据返回给请求对应的client</p><h4><span id="worker">worker</span></h4><p><img src="https://blog-1256756464.cos.ap-shanghai.myqcloud.com/image/Jietu20180603-181150.jpg" alt=""><br>创建ZMQ_DEALER的inproc的socket，并与worker_dispatcher连接，以此处理其转发过来的client的请求<br>当其要请求其它服务时，统一通过client_dispatcher对外处理</p><h4><span id="client_dispather">client_dispather</span></h4><p><img src="https://blog-1256756464.cos.ap-shanghai.myqcloud.com/image/Jietu20180603-201920.jpg" alt=""><br>其通过inproc的socket接收worker中对其它服务的请求，并管理对外连接，释放长时间不使用的连接等<br>待下游服务返回数据，其通过inproc的socket返回给对应的worker</p><p><em>下次讲一下定时器的设计</em></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在研究raft论文，想动手实现一下，但是手上没有合适的网络框架，花了几天造了个轮子。&lt;/p&gt;
    
    </summary>
    
      <category term="系统设计" scheme="http://www.xiaocc.xyz/categories/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
    
    
  </entry>
  
</feed>
